var LF = {};
(function(A, au) {
	var ay = "pc",
		K = "iPhone",
		p = "iPod",
		M = "iPad",
		z = "Android",
		U = "Windows Phone",
		O = "BlackBerry",
		R = "none",
		W = "undefined",
		G = "landscape",
		d = "portrait",
		ad, aa;

	function y(aC) {
		this.eventType = aC;
		this._ll_preventDefault = false
	}
	y.prototype.preventDefault = function() {
		this._ll_preventDefault = true
	};
	y.INIT = "init";
	y.COMPLETE = "complete";
	y.ENTER_FRAME = "enter_frame";
	y.WINDOW_RESIZE = "resize";
	y.WINDOW_ORIENTATIONCHANGE = "orientationchange";
	y.SOUND_COMPLETE = "sound_complete";
	y.END_CONTACT = "endContact";
	y.PRE_SOLVE = "preSolve";
	y.POST_SOLVE = "postSolve";
	y.BEGIN_CONTACT = "beginContact";
	y.addEventListener = function(aF, aD, aE, aC) {
		if (aC == null) {
			aC = false
		}
		if (aF.addEventListener) {
			aF.addEventListener(aD, aE, aC)
		} else {
			if (aF.attachEvent) {
				aF["e" + aD + aE] = aE;
				aF[aD + aE] = function() {
					aF["e" + aD + aE]()
				};
				aF.attachEvent("on" + aD, aF[aD + aE])
			}
		}
	};
	y.removeEventListener = function(aF, aD, aE, aC) {
		if (aC == null) {
			aC = false
		}
		if (aF.removeEventListener) {
			aF.removeEventListener(aD, aE, aC)
		} else {
			if (aF.detachEvent) {
				aF["e" + aD + aE] = aE;
				aF[aD + aE] = function() {
					aF["e" + aD + aE]()
				};
				aF.detachEvent("on" + aD, aF[aD + aE])
			}
		}
	};
	var g = function() {
			throw "LMouseEvent cannot be instantiated"
		};
	g.MOUSE_DOWN = "mousedown";
	g.MOUSE_UP = "mouseup";
	g.TOUCH_START = "touchstart";
	g.TOUCH_MOVE = "touchmove";
	g.TOUCH_END = "touchend";
	g.MOUSE_MOVE = "mousemove";
	g.MOUSE_OVER = "mouseover";
	g.MOUSE_OUT = "mouseout";
	g.DOUBLE_CLICK = "dblclick";
	var ar = function() {
			throw "LMultitouchInputMode cannot be instantiated"
		};
	ar.NONE = "none";
	ar.GESTURE = "gesture";
	ar.TOUCH_POINT = "touchPoint";
	var H = function() {
			throw "LMultitouch cannot be instantiated"
		};
	H.inputMode = "none";
	H.touchs = [];
	var Z = function() {
			throw "LTimerEvent cannot be instantiated"
		};
	Z.TIMER = "timer";
	Z.TIMER_COMPLETE = "timerComplete";
	var aq = function() {
			throw "LTextEvent cannot be instantiated"
		};
	aq.TEXT_INPUT = "textInput";
	aq.WIND_COMPLETE = "windComplete";
	var ao = function() {
			throw "LFocusEvent cannot be instantiated"
		};
	ao.FOCUS_IN = "focusIn";
	ao.FOCUS_OUT = "focusOut";
	var al = (function() {
		function aC() {
			var aD = this;
			aD.container = {};
			aD.dispatchAllEvent = false;
			aD.mouseDownContainer = [];
			aD.mouseUpContainer = [];
			aD.mouseMoveContainer = [];
			aD.mouseOverContainer = [];
			aD.mouseOutContainer = [];
			aD.mouseDblContainer = [];
			aD.textFieldInputContainer = [];
			aD.buttonContainer = []
		}
		aC.prototype = {
			pushInputBox: function(aG) {
				var aF = this,
					aH = aF.textFieldInputContainer,
					aE, aD;
				for (aE = 0, aD = aH.length; aE < aD; aE++) {
					if (aG.objectIndex == aH[aE].objectIndex) {
						return
					}
				}
				aF.textFieldInputContainer.push(aG)
			},
			removeInputBox: function(aG) {
				var aF = this,
					aH = aF.textFieldInputContainer,
					aE, aD;
				for (aE = 0, aD = aH.length; aE < aD; aE++) {
					if (aG.objectIndex == aH[aE].objectIndex) {
						aF.textFieldInputContainer.splice(aE, 1);
						break
					}
				}
			},
			pushButton: function(aG) {
				var aF = this,
					aH = aF.buttonContainer,
					aE, aD;
				for (aE = 0, aD = aH.length; aE < aD; aE++) {
					if (aG.objectIndex == aH[aE].objectIndex) {
						return
					}
				}
				aF.buttonContainer.push(aG)
			},
			removeButton: function(aG) {
				var aF = this,
					aH = aF.buttonContainer,
					aE, aD;
				for (aE = 0, aD = aH.length; aE < aD; aE++) {
					if (aG.objectIndex == aH[aE].objectIndex) {
						aF.buttonContainer.splice(aE, 1);
						break
					}
				}
			},
			dispatchEventButton: function(aG) {
				var aF = this,
					aH = aF.buttonContainer,
					aE, aD;
				for (aE = 0, aD = aH.length; aE < aD; aE++) {
					if (typeof aF.buttonContainer[aE].ll_button_mode == "") {
						aF.buttonContainer[aE].ll_button_mode(aG)
					}
				}
			},
			addEvent: function(aG, aF, aE) {
				var aD = this;
				aF.push({
					container: aG,
					listener: aE
				})
			},
			removeEvent: function(aI, aH, aG) {
				var aF = this,
					aE, aD;
				for (aE = 0, aD = aH.length; aE < aD; aE++) {
					if (aH[aE].container.objectIndex === aI.objectIndex && (!aG || aH[aE].listener == aG)) {
						aH.splice(aE, 1);
						break
					}
				}
			},
			addMouseDownEvent: function(aF, aE) {
				var aD = this;
				aD.addEvent(aF, aD.mouseDownContainer, aE)
			},
			addMouseUpEvent: function(aF, aE) {
				var aD = this;
				aD.addEvent(aF, aD.mouseUpContainer, aE)
			},
			addMouseMoveEvent: function(aF, aE) {
				var aD = this;
				aD.addEvent(aF, aD.mouseMoveContainer, aE)
			},
			addMouseOverEvent: function(aF, aE) {
				var aD = this;
				aD.addEvent(aF, aD.mouseOverContainer, aE)
			},
			addMouseOutEvent: function(aF, aE) {
				var aD = this;
				aD.addEvent(aF, aD.mouseOutContainer, aE)
			},
			addMouseDblEvent: function(aF, aE) {
				var aD = this;
				aD.addEvent(aF, aD.mouseDblContainer, aE)
			},
			addMouseEvent: function(aG, aD, aF) {
				var aE = this;
				if (aD == g.MOUSE_DOWN) {
					aE.addMouseDownEvent(aG, aF)
				} else {
					if (aD == g.MOUSE_UP) {
						aE.addMouseUpEvent(aG, aF)
					} else {
						if (aD == g.MOUSE_OVER) {
							aE.addMouseOverEvent(aG, aF)
						} else {
							if (aD == g.MOUSE_OUT) {
								aE.addMouseOutEvent(aG, aF)
							} else {
								if (aD == g.MOUSE_MOVE) {
									aE.addMouseMoveEvent(aG, aF)
								} else {
									aE.addMouseDblEvent(aG, aF)
								}
							}
						}
					}
				}
			},
			hasEventListener: function(aJ, aF, aI) {
				var aG = this,
					aH;
				if (aF == g.MOUSE_DOWN) {
					aH = aG.mouseDownContainer
				} else {
					if (aF == g.MOUSE_UP) {
						aH = aG.mouseUpContainer
					} else {
						if (aF == g.MOUSE_OVER) {
							aH = aG.mouseOverContainer
						} else {
							if (aF == g.MOUSE_OUT) {
								aH = aG.mouseOutContainer
							} else {
								if (aF == g.MOUSE_MOVE) {
									aH = aG.mouseMoveContainer
								} else {
									aH = aG.mouseDblContainer
								}
							}
						}
					}
				}
				for (var aE = 0, aD = aH.length; aE < aD; aE++) {
					if (aH[aE].container.objectIndex === aJ.objectIndex && (!aI || aH[aE].listener == aI)) {
						return true
					}
				}
				return false
			},
			removeMouseDownEvent: function(aF, aE) {
				var aD = this;
				aD.removeEvent(aF, aD.mouseDownContainer, aE)
			},
			removeMouseUpEvent: function(aF, aE) {
				var aD = this;
				aD.removeEvent(aF, aD.mouseUpContainer, aE)
			},
			removeMouseMoveEvent: function(aF, aE) {
				var aD = this;
				aD.removeEvent(aF, aD.mouseMoveContainer, aE)
			},
			removeMouseOverEvent: function(aF, aE) {
				var aD = this;
				aD.removeEvent(aF, aD.mouseOverContainer, aE)
			},
			removeMouseOutEvent: function(aF, aE) {
				var aD = this;
				aD.removeEvent(aF, aD.mouseOutContainer, aE)
			},
			removeMouseDblEvent: function(aF, aE) {
				var aD = this;
				aD.removeEvent(aF, aD.mouseDblContainer, aE)
			},
			removeMouseEvent: function(aG, aD, aF) {
				var aE = this;
				if (aD == g.MOUSE_DOWN) {
					aE.removeMouseDownEvent(aG, aF)
				} else {
					if (aD == g.MOUSE_UP) {
						aE.removeMouseUpEvent(aG, aF)
					} else {
						if (aD == g.MOUSE_OVER) {
							aE.removeMouseOverEvent(aG, aF)
						} else {
							if (aD == g.MOUSE_OUT) {
								aE.removeMouseOutEvent(aG, aF)
							} else {
								if (aD == g.MOUSE_MOVE) {
									aE.removeMouseMoveEvent(aG, aF)
								} else {
									aE.removeMouseDblEvent(aG, aF)
								}
							}
						}
					}
				}
			},
			dispatchMouseEvent: function(aF, aE) {
				var aD = this;
				if (aE == g.MOUSE_DOWN) {
					aD.dispatchEvent(aF, aD.mouseDownContainer, g.MOUSE_DOWN);
					aD.dispatchEvent(aF, aD.textFieldInputContainer)
				} else {
					if (aE == g.MOUSE_UP) {
						aD.dispatchEvent(aF, aD.mouseUpContainer, g.MOUSE_UP)
					} else {
						if (aE == g.DOUBLE_CLICK) {
							aD.dispatchEvent(aF, aD.mouseDblContainer, g.DOUBLE_CLICK)
						} else {
							aD.dispatchEventButton(aF);
							aD.dispatchEvent(aF, aD.mouseOutContainer, g.MOUSE_OUT);
							aD.dispatchEvent(aF, aD.mouseOverContainer, g.MOUSE_OVER);
							aD.dispatchEvent(aF, aD.mouseMoveContainer, g.MOUSE_MOVE)
						}
					}
				}
			},
			getRootParams: function(aD) {
				var aF = aD.parent,
					aE = {
						x: 0,
						y: 0,
						scaleX: 1,
						scaleY: 1
					};
				while (aF && aF != "root") {
					aE.x *= aF.scaleX;
					aE.y *= aF.scaleY;
					aE.x += aF.x;
					aE.y += aF.y;
					aE.scaleX *= aF.scaleX;
					aE.scaleY *= aF.scaleY;
					aF = aF.parent
				}
				return aE
			},
			_mouseEnabled: function(aE) {
				var aD = this;
				if (!aE || !aE.parent) {
					return false
				}
				if (!aE.visible || (typeof aE.mouseEnabled != W && !aE.mouseEnabled)) {
					return false
				}
				var aF = aE.parent;
				while (aF && aF != "root") {
					if (!aF.mouseEnabled || !aF.mouseChildren || !aF.visible) {
						return false
					}
					aF = aF.parent;
					if (!aF) {
						return false
					}
				}
				return true
			},
			_dispatchEvent: function(aD, aJ, aL, aI, aK, aH) {
				var aM = this,
					aG, aF, aE = aL.length;
				for (aG = aK; aG <= aH && aG < aE; aG++) {
					o = aL[aG];
					if (o.sp.objectIndex != aI) {
						continue
					}
					aD.currentTarget = aD.clickTarget = o.sp;
					if (!aD.target) {
						aD.target = o.sp
					}
					aD.event_type = aJ;
					aD.selfX = (aD.offsetX - o.co.x - o.sp.x) / (o.co.scaleX * o.sp.scaleX);
					aD.selfY = (aD.offsetY - o.co.y - o.sp.y) / (o.co.scaleY * o.sp.scaleY);
					o.listener(aD, o.sp)
				}
			},
			dispatchEvent: function(aD, aJ, aK) {
				var aN = this,
					aF, aL, aM = [],
					aG, aI, aH;
				for (aI = 0, aH = aJ.length; aI < aH; aI++) {
					aF = aJ[aI].container || aJ[aI];
					if (!aN._mouseEnabled(aF)) {
						continue
					}
					aL = aN.getRootParams(aF);
					if (!aK && aF.mouseEvent) {
						aF.mouseEvent(aD, g.MOUSE_DOWN, aL);
						continue
					}
					if (aF.ismouseon(aD, aL)) {
						if (aK == g.MOUSE_OUT) {
							continue
						}
						if (aK == g.MOUSE_OVER) {
							if (aF.ll_mousein) {
								continue
							}
						}
						if (aK != g.MOUSE_UP) {
							aF.ll_mousein = true
						}
						aM.push({
							sp: aF,
							co: aL,
							listener: aJ[aI].listener
						})
					} else {
						if (aK != g.MOUSE_OUT && aK != g.MOUSE_OVER) {
							continue
						}
						if (!aF.ll_mousein) {
							continue
						}
						aF.ll_mousein = false;
						aM.push({
							sp: aF,
							co: aL,
							listener: aJ[aI].listener
						})
					}
				}
				if (aM.length == 0) {
					return
				}
				if (aM.length > 1) {
					aM = aM.sort(aN._sort.bind(aN))
				}
				aH = aM.length;
				for (aI = 0; aI < aH; aI++) {
					aG = aM[aI];
					aN._dispatchEvent(aD, aK, aM, aG.sp.objectIndex, aI, aN.dispatchAllEvent ? aH - 1 : aI);
					if (aI < aM.length - 1 && aG.sp.objectIndex == aM[aI + 1].sp.objectIndex) {
						aM.splice(aI, 1);
						aI--;
						continue
					}
					var aE;
					while (true) {
						if (!aE) {
							aE = aG.sp.parent;
							aD.target = aG.sp
						}
						if (!aE || aE == "root") {
							break
						}
						aN._dispatchEvent(aD, aK, aM, aE.objectIndex, aI + 1, aH);
						aD.target = aE;
						aE = aE.parent;
						if (!aE || aE == "root") {
							break
						}
					}
					if (!aN.dispatchAllEvent) {
						break
					} else {
						continue
					}
				}
			},
			set: function(aE, aD) {
				this.container[aE] = aD
			},
			_sort: function(aL, aK) {
				var aM = this,
					aG, aE, aJ = aM._getSort(aL.sp),
					aD = aM._getSort(aK.sp),
					aI, aH, aF;
				for (aI = 0, aH = aJ.length, aF = aD.length; aI < aH && aI < aF; aI++) {
					aG = aJ[aI];
					aE = aD[aI];
					if (aG.objectIndex == aE.objectIndex) {
						continue
					}
					return aE.parent.getChildIndex(aE) - aG.parent.getChildIndex(aG)
				}
				return aD.length - aJ.length
			},
			_getSort: function(aD) {
				var aF = aD.parent,
					aE = [aD];
				while (aF && aF != "root") {
					aE.unshift(aF);
					aF = aF.parent
				}
				return aE
			}
		};
		return new aC()
	})();
	var C = function() {
			throw "LKeyboardEvent cannot be instantiated"
		};
	C.KEY_DOWN = "keydown";
	C.KEY_UP = "keyup";
	C.KEY_PRESS = "keypress";
	var e = function() {
			throw "LAccelerometerEvent cannot be instantiated"
		};
	e.DEVICEMOTION = "devicemotion";

	function ax() {
		throw "LStageAlign cannot be instantiated"
	}
	ax.TOP = "T";
	ax.BOTTOM = "B";
	ax.LEFT = "L";
	ax.RIGHT = "Re";
	ax.TOP_LEFT = "TL";
	ax.TOP_RIGHT = "TR";
	ax.TOP_MIDDLE = "TM";
	ax.BOTTOM_LEFT = "BL";
	ax.BOTTOM_RIGHT = "BR";
	ax.BOTTOM_MIDDLE = "BM";
	ax.MIDDLE = "M";

	function aj() {
		throw "LStageScaleMode cannot be instantiated"
	}
	aj.EXACT_FIT = "exactFit";
	aj.SHOW_ALL = "showAll";
	aj.NO_BORDER = "noBorder";
	aj.NO_SCALE = "noScale";
	var ac = (function() {
		function aC() {
			throw "LGlobal cannot be instantiated"
		}
		aC.FULL_SCREEN = "full_screen";
		aC.traceDebug = false;
		aC.displayState = R;
		aC.aspectRatio = R;
		aC.canvasObj = null;
		aC.canvas = null;
		aC.webAudio = true;
		aC.objectIndex = 1;
		aC.stage = null;
		aC.width = 0;
		aC.height = 0;
		aC.box2d = null;
		aC.speed = 50;
		aC.IS_MOUSE_DOWN = false;
		aC.stopPropagation = false;
		aC.preventDefault = true;
		aC.childList = new Array();
		aC.dragList = new Array();
		aC.excludingContainer = new Array();
		aC.fpsStatus = null;
		aC.stageScale = "noScale";
		aC.align = "M";
		aC.mobile = false;
		aC.canTouch = false;
		aC.os = ay;
		aC.ios = false;
		aC.android = false;
		aC.android_new = false;
		aC.backgroundColor = null;
		aC.destroy = true;
		aC.forceRefresh = false;
		aC.ratio = au.devicePixelRatio || 1;
		aC.startTimer = 0;
		aC.keepClear = true;
		aC.top = 0;
		aC.left = 0;
		aC.window = au;
		aC.pauseLoop = false;
		aC._setPauseLoopTrue = false;
		aC.setPauseLoop = function(aE, aD) {
			if (aE && aD) {
				aC._setPauseLoopTrue = true
			} else {
				aC.pauseLoop = aE;
				aC._setPauseLoopTrue = false
			}
		};
		(function(aE) {
			aC.isOldFirefox = (function(aG) {
				var aH = aG.toLowerCase().indexOf("firefox");
				if (aH < 0) {
					return false
				}
				var aF = aG.substring(aH + 8, aG.length);
				return parseFloat(aF) < 39
			})(aE);
			if (aE.indexOf(K) > 0) {
				aC.os = K;
				aC.canTouch = true;
				aC.ios = true
			} else {
				if (aE.indexOf(p) > 0) {
					aC.os = p;
					aC.canTouch = true;
					aC.ios = true
				} else {
					if (aE.indexOf(M) > 0) {
						aC.os = M;
						aC.ios = true;
						aC.canTouch = true
					} else {
						if (aE.indexOf(z) > 0) {
							aC.os = z;
							aC.canTouch = true;
							aC.android = true;
							var aD = aE.indexOf(z);
							if (parseInt(aE.substr(aD + 8, 1)) > 3) {
								aC.android_new = true
							}
						} else {
							if (aE.indexOf(U) > 0) {
								aC.os = U;
								aC.canTouch = true
							} else {
								if (aE.indexOf(O) > 0) {
									aC.os = O;
									aC.canTouch = true
								}
							}
						}
					}
				}
			}
			aC.mobile = aC.canTouch
		})(navigator.userAgent);
		aC.requestAnimFrame = function() {
			return au.requestAnimationFrame || au.webkitRequestAnimationFrame || au.mozRequestAnimationFrame || au.oRequestAnimationFrame || au.msRequestAnimationFrame ||
			function(aD) {
				au.setTimeout(aD, 1000 / 60, (new Date).getTime())
			}
		}();
		aC.setDebug = function(aD) {
			aC.traceDebug = aD
		};
		aC.setCanvas = function(aF, aD, aE) {
			aC.ll_createCanvas(aF, aD, aE);
			aC.ll_createStage();
			if (aC.displayState == aw.FULL_SCREEN) {
				aC.resize()
			} else {
				if (typeof aC.displayState == "number") {
					aC.resize(aC.width * aC.displayState, aC.height * aC.displayState)
				}
			}
			if (aC.notMouseEvent) {
				return
			}
			if (aC.canTouch) {
				aC.ll_clicks = 0;
				aC.ll_prev_clickTime = 0;
				y.addEventListener(aC.canvasObj, g.TOUCH_START, aC.ll_touchStart);
				y.addEventListener(aC.canvasObj, g.TOUCH_END, aC.ll_touchEnd);
				y.addEventListener(aC.canvasObj, g.TOUCH_MOVE, aC.ll_touchMove)
			}
		};
		aC.ll_createCanvas = function(aH, aD, aE) {
			aC.id = aH;
			aC.object = document.getElementById(aH);
			aD = aD || $(aC.object).innerWidth();
			aE = aE || $(aC.object).innerHeight();
			aC.object.innerHTML = '<div style="position:absolute;margin:0;padding:0;overflow:visible;-webkit-transform: translateZ(0);z-index:0;"><canvas id="' + aC.id + '_canvas" style="margin:0;padding:0;width:' + aD + "px;height:" + aE + 'px;"><div id="noCanvas"><p>Hey there, it looks like you\'re using Microsoft\'s Internet Explorer. Microsoft hates the Web and doesn\'t support HTML5 :(</p></div></canvas></div><div id="' + aC.id + '_InputText" style="position:absolute;margin:0;padding:0;z-index:10;display:none;"><textarea rows="1" id="' + aC.id + '_InputTextareaBox" style="resize:none;background:transparent;border:0px;"></textarea><input type="text" id="' + aC.id + '_InputTextBox"  style="background:transparent;border:0px;" /><input type="password" id="' + aC.id + '_passwordBox"  style="background:transparent;border:0px;" /></div>';
			aC.canvasObj = document.getElementById(aC.id + "_canvas");
			aC._canvas = document.createElement("canvas");
			aC._context = aC._canvas.getContext("2d");
			if (aC._context) {
				aC.canvasObj.innerHTML = ""
			}
			var aG = 1;
			try {
				aG = aC._context.backingStorePixelRatio || aC._context.webkitBackingStorePixelRatio || aC._context.mozBackingStorePixelRatio || aC._context.msBackingStorePixelRatio || aC._context.oBackingStorePixelRatio || 1
			} catch (aF) {}
			aC.ratio = (au.devicePixelRatio || 1) / aG;
			aC.inputBox = document.getElementById(aC.id + "_InputText");
			aC.inputTextareaBoxObj = document.getElementById(aC.id + "_InputTextareaBox");
			aC.inputTextBoxObj = document.getElementById(aC.id + "_InputTextBox");
			aC.passwordBoxObj = document.getElementById(aC.id + "_passwordBox");
			aC.inputTextField = null;
			if (aD) {
				aC.canvasObj.width = aD
			}
			if (aE) {
				aC.canvasObj.height = aE
			}
			aC.width = aC.canvasObj.width;
			aC.height = aC.canvasObj.height;
			aC.canvasStyleWidth = aC.width;
			aC.canvasStyleHeight = aC.height;
			aC.canvas = aC.canvasObj.getContext("2d");
			aC.canvasObj.style.height = aC.canvasObj.height + "px";
			aC.canvasObj.style.width = aC.canvasObj.width + "px";
			aC.canvasObj.width *= aC.ratio;
			aC.canvasObj.height *= aC.ratio;
			aC.offsetX = ad = 0;
			aC.offsetY = aa = 0
		};
		aC.ll_createStage = function() {
			aC.stage = new V();
			aC.stage.parent = "root";
			aC.childList.push(aC.stage);
			aC.stage.baseAddEvent = aC.stage.addEventListener;
			aC.stage.baseRemoveEvent = aC.stage.removeEventListener;
			aC.stage.addEventListener = function(aD, aE) {
				if (aD == y.WINDOW_RESIZE || aD == y.WINDOW_ORIENTATIONCHANGE) {
					if (aD == y.WINDOW_RESIZE) {
						aC.stage.onresizeListener = aE
					} else {
						aC.stage.onorientationchangeListener = aE
					}
					if (!aC.stage.onresize) {
						aC.stage.onresize = function(aF) {
							aC.stage.onresizeEvent = aF
						};
						y.addEventListener(aC.window, aD, aC.stage.onresize)
					}
				} else {
					if (aD == C.KEY_DOWN || aD == C.KEY_UP || aD == C.KEY_PRESS) {
						y.addEventListener(aC.window, aD, aE)
					} else {
						aC.stage.baseAddEvent(aD, aE)
					}
				}
			};
			aC.stage.removeEventListener = function(aD, aE) {
				if (aD == y.WINDOW_RESIZE || aD == y.WINDOW_ORIENTATIONCHANGE) {
					if (aD == y.WINDOW_RESIZE) {
						delete aC.stage.onresizeListener;
						if (aC.stage.onorientationchangeListener) {
							return
						}
					} else {
						delete aC.stage.onorientationchangeListener;
						if (aC.stage.onresizeListener) {
							return
						}
					}
					y.removeEventListener(aC.window, y.WINDOW_RESIZE, aC.stage.onresize);
					delete aC.stage.onresize
				} else {
					if (aD == C.KEY_DOWN || aD == C.KEY_UP || aD == C.KEY_PRESS) {
						y.removeEventListener(aC.window, aD, aE)
					} else {
						aC.stage.baseRemoveEvent(aD, aE)
					}
				}
			};
			aC.innerWidth = au.innerWidth;
			aC.innerHeight = au.innerHeight;
			y.addEventListener(aC.window, "blur", function() {
				aC.stage.dispatchEvent(new y(ao.FOCUS_OUT))
			})
		};
		aC.ll_touchStart = function(aD) {
			aC._outStageCheckCount = 1;
			aC.IS_MOUSE_DOWN = true;
			aC.stage.dispatchEvent(new y(ao.FOCUS_IN));
			if (aC.inputBox.style.display != R) {
				aC.inputTextField._ll_getValue()
			}
			var aK, aI, aL, aH, aJ;
			aK = parseInt(0 + aC.object.style.left) + parseInt(aC.canvasObj.style.marginLeft);
			aI = parseInt(0 + aC.object.style.top) + parseInt(aC.canvasObj.style.marginTop);
			if (H.inputMode == ar.NONE) {
				aL = aC.ll_touchStartEvent(aD, 0, aK, aI)
			} else {
				if (H.inputMode == ar.TOUCH_POINT) {
					for (var aJ = 0, aG = aD.touches.length; aJ < aG; aJ++) {
						if (!H.touchs["touch" + aD.touches[aJ].identifier]) {
							aL = aC.ll_touchStartEvent(aD, aJ, aK, aI)
						}
					}
				}
			}
			var aF = new Date();
			var aE = aF.getTime();
			aC.ll_clicks = (aE <= (aC.ll_prev_clickTime + 500)) ? (aC.ll_clicks + 1) : 1;
			aC.ll_prev_clickTime = aE;
			if (aC.ll_clicks === 2) {
				aC.mouseEvent(aL, g.DOUBLE_CLICK);
				aC.ll_clicks = 0
			}
			if (aC.mouseJoint_start) {
				aC.mouseJoint_start(aL)
			}
			aC.touchHandler(aD)
		};
		aC.ll_touchStartEvent = function(aG, aH, aE, aD) {
			var aF = {
				offsetX: (aG.touches[aH].pageX - aE),
				offsetY: (aG.touches[aH].pageY - aD),
				touchPointID: aG.touches[aH].identifier
			};
			aF.offsetX = aC.ll_scaleX(aF.offsetX);
			aF.offsetY = aC.ll_scaleY(aF.offsetY);
			ad = aC.offsetX = aF.offsetX;
			aa = aC.offsetY = aF.offsetY;
			H.touchs["touch" + aF.touchPointID] = aF;
			aC.mouseEvent(aF, g.MOUSE_DOWN);
			aC.buttonStatusEvent = aF;
			return aF
		};
		aC.ll_touchEnd = function(aI) {
			var aJ, aH, aE, aF, aD, aG;
			aC.IS_MOUSE_DOWN = false;
			if (H.inputMode == ar.TOUCH_POINT) {
				for (aE in H.touchs) {
					aJ = H.touchs[aE];
					aG = false;
					for (aF = 0, aD = aI.touches.length; aF < aD; aF++) {
						if (aI.touches[aF].identifier == aJ.touchPointID) {
							aG = true;
							break
						}
					}
					if (!aG) {
						aH = aJ;
						delete H.touchs[aE];
						aC.mouseEvent(aH, g.MOUSE_UP)
					}
				}
			}
			if (!aH) {
				aH = {
					offsetX: aC.offsetX,
					offsetY: aC.offsetY
				}
			}
			aC.mouseEvent(aH, g.MOUSE_UP);
			aC.touchHandler(aI);
			aC.buttonStatusEvent = null;
			if (aC.mouseJoint_end) {
				aC.mouseJoint_end()
			}
			aC.stage.dispatchEvent(new y(ao.FOCUS_OUT))
		};
		aC.ll_touchMove = function(aG) {
			var aI, aH, aE, aD, aF = aG.touches.length;
			aI = parseInt(0 + aC.object.style.left) + parseInt(aC.canvasObj.style.marginLeft);
			aH = parseInt(0 + aC.object.style.top) + parseInt(aC.canvasObj.style.marginTop);
			if (H.inputMode == ar.NONE) {
				aF = 1
			}
			for (i = 0, aD = aG.touches.length; i < aD && i < aF; i++) {
				aE = {
					offsetX: (aG.touches[i].pageX - aI),
					offsetY: (aG.touches[i].pageY - aH),
					touchPointID: aG.touches[i].identifier
				};
				aE.offsetX = aC.ll_scaleX(aE.offsetX);
				aE.offsetY = aC.ll_scaleY(aE.offsetY);
				ad = aC.offsetX = aE.offsetX;
				aa = aC.offsetY = aE.offsetY;
				if (H.touchs["touch" + aE.touchPointID] && H.touchs["touch" + aE.touchPointID].offsetX == aE.offsetX && H.touchs["touch" + aE.touchPointID].offsetY == aE.offsetY) {
					continue
				}
				aC.buttonStatusEvent = aE;
				H.touchs["touch" + aE.touchPointID] = aE;
				if (aE.offsetX <= 0 || aE.offsetX >= aC.innerWidth || aE.offsetX >= aC.width || aE.offsetY <= 0 || aE.offsetY >= aC.innerHeight || aE.offsetY >= aC.height) {
					aC._outStageCheckCount = 0
				} else {
					aC._outStageCheckCount = 1
				}
				aC.mouseEvent(aE, g.MOUSE_MOVE)
			}
			aC.touchHandler(aG);
			if (aC.mouseJoint_move) {
				aC.mouseJoint_move(aE)
			}
		};
		aC.ll_mouseOut = function(aE) {
			if (aE.offsetX == null && aE.layerX != null) {
				aE.offsetX = aE.layerX;
				aE.offsetY = aE.layerY
			}
			var aD = {};
			aD.offsetX = aC.ll_scaleX(aE.offsetX);
			aD.offsetY = aC.ll_scaleY(aE.offsetY);
			aC.mouseEvent(aD, g.MOUSE_OUT);
			aC.IS_MOUSE_DOWN = false
		};
		aC.touchHandler = function(aD) {
			if (aC.stopPropagation) {
				aD.stopPropagation();
				if (aD.stopImmediatePropagation) {
					aD.stopImmediatePropagation()
				}
			}
			if (aC.preventDefault) {
				aD.preventDefault()
			}
			return aD
		};
		aC.mouseEvent = function(aF, aE) {
			if (aE == g.MOUSE_MOVE) {
				aC.dragHandler(aF)
			}
			if (al.container[aE]) {
				al.dispatchMouseEvent(aF, aE);
				return
			}
			for (var aD = aC.childList.length - 1; aD >= 0; aD--) {
				if (aC.childList[aD].mouseEvent && aC.childList[aD].mouseEvent(aF, aE)) {
					break
				}
			}
		};
		aC.dragHandler = function(aF) {
			var aD, aE, aH, aG = aC.dragList;
			for (aD = aG.length - 1; aD >= 0; aD--) {
				aE = aG[aD];
				if (aC.canTouch && aE.ll_touchPointID != aF.touchPointID) {
					continue
				}
				aH = aE.parent.globalToLocal(new av(aF.offsetX - aE.ll_dragMX + aE.ll_dragGlobalPoint.x, aF.offsetY - aE.ll_dragMY + aE.ll_dragGlobalPoint.y));
				aE.x = aH.x;
				aE.y = aH.y;
				if (aE.dragRange) {
					if (aE.x < aE.dragRange.left) {
						aE.x = aE.dragRange.left
					} else {
						if (aE.x > aE.dragRange.right) {
							aE.x = aE.dragRange.right
						}
					}
					if (aE.y < aE.dragRange.top) {
						aE.y = aE.dragRange.top
					} else {
						if (aE.y > aE.dragRange.bottom) {
							aE.y = aE.dragRange.bottom
						}
					}
				}
				break
			}
		};
		aC.onShow = function() {
			if (aC.pauseLoop) {
				return
			}
			if (aC._setPauseLoopTrue) {
				aC.pauseLoop = true;
				aC._setPauseLoopTrue = false
			}
			hg.time && hg.time.updateInFrame(aC.delta);
			if (aC.canvas == null) {
				return
			}
			if (aC._outStageCheckCount <= 0) {
				aC._outStageCheckCount--;
				if (aC._outStageCheckCount < -2) {
					aC.stage.dispatchEvent(new y(ao.FOCUS_OUT));
					aC._outStageCheckCount = 1
				}
			}
			if (aC.fpsStatus) {
				aC.fpsStatus.reset()
			}
			if (aC.stage.onresizeEvent) {
				if (aC.stage.onresizeListener) {
					aC.stage.onresizeListener(aC.stage.onresizeEvent)
				}
				if (aC.stage.onorientationchangeListener) {
					aC.stage.onorientationchangeListener({
						orientation: (au.innerWidth > au.innerHeight ? G : d)
					})
				}
				delete aC.stage.onresizeEvent
			}
			if (aC.forceRefresh) {
				aC.canvasObj.width = aC.canvasObj.width;
				aC.forceRefresh = false
			}
			aC.canvas.beginPath();
			if (aC.box2d != null) {
				aC.box2d.ll_show();
				if (!aC.traceDebug && aC.keepClear) {
					aC.canvas.clearRect(0, 0, aC.width + 1, aC.height + 1)
				}
			} else {
				if (aC.keepClear) {
					aC.canvas.clearRect(0, 0, aC.width + 1, aC.height + 1)
				}
				if (aC.backgroundColor !== null) {
					aC.canvas.fillStyle = aC.backgroundColor;
					aC.canvas.fillRect(0, 0, aC.width, aC.height)
				}
			}
			aC.show(aC.childList);
			A.showTopBar()
		};
		aC.show = function(aF) {
			!aF && (aF = aC.childList);
			for (var aE = 0, aD = aF.length, aG; aE < aD; aE++) {
				aG = aF[aE];
				if (aG && aG.ll_show) {
					aG.ll_show();
					if (aG._ll_removeFromSelf) {
						aE--;
						aD--
					}
				}
			}
		};
		aC.divideCoordinate = function(aL, aJ, aM, aF) {
			var aI, aG, aH = aL / aF,
				aE = aJ / aM,
				aD = [],
				aK;
			for (aI = 0; aI < aM; aI++) {
				aK = [];
				for (aG = 0; aG < aF; aG++) {
					aK.push({
						x: aH * aG,
						y: aE * aI,
						width: aH,
						height: aE
					})
				}
				aD.push(aK)
			}
			return aD
		};
		aC.divideList = function(aK, aJ, aL, aF) {
			var aI, aG, aH = aK / aF,
				aE = aJ / aL,
				aD = [];
			for (aI = 0; aI < aL; aI++) {
				for (aG = 0; aG < aF; aG++) {
					aD.push({
						x: aH * aG,
						y: aE * aI,
						width: aH,
						height: aE
					})
				}
			}
			return aD
		};
		aC._create_loading_color = function() {
			var aD = aC.canvas.createRadialGradient(aC.width / 2, aC.height, 0, aC.width / 2, 0, aC.height);
			aD.addColorStop(0, "red");
			aD.addColorStop(0.3, "orange");
			aD.addColorStop(0.4, "yellow");
			aD.addColorStop(0.5, "green");
			aD.addColorStop(0.8, "blue");
			aD.addColorStop(1, "violet");
			return aD
		};
		aC.hitPolygon = function(aI, aL, aK) {
			var aJ = 0,
				aN = aI[0],
				aG = (aL <= aN[0]),
				aF = (aK <= aN[1]),
				aH, aE, aM, aD, aO;
			for (aH = 1, aE = aI.length; aH < aE + 1; aH++) {
				aM = aI[aH % aE];
				aD = (aL <= aM[0]);
				aO = (aK <= aM[1]);
				if (aF != aO) {
					if (aG == aD) {
						if (aG) {
							aJ += (aF ? -1 : 1)
						}
					} else {
						if (aL <= (aN[0] + (aM[0] - aN[0]) * (aK - aN[1]) / (aM[1] - aN[1]))) {
							aJ += (aF ? -1 : 1)
						}
					}
				}
				aN = aM;
				aG = aD;
				aF = aO
			}
			return 0 != aJ
		};
		aC.hitTestPolygon = function(aN, aM) {
			var aI, aH, aG, aD, aL, aK, aJ = [
				[aN, [],
					[]
				],
				[aM, [],
					[]
				]
			];
			for (aH = 0; aH < aJ.length; aH++) {
				aD = aJ[aH][0], aL = aJ[aH][1];
				for (aI = 0, aG = aD.length; aI < aG; aI++) {
					aJ[aH][2].push(new F(aD[aI][0], aD[aI][1]));
					if (aI < aG - 1) {
						aL.push((new F(aD[aI + 1][0] - aD[aI][0], aD[aI + 1][1] - aD[aI][1])).normL())
					}
				}
				aL.push((new F(aD[0][0] - aD[aG - 1][0], aD[0][1] - aD[aG - 1][1])).normL())
			}
			for (aH = 0; aH < aJ.length; aH++) {
				aL = aJ[aH][1];
				for (aI = 0, aG = aL.length; aI < aG; aI++) {
					var aF = F.getMinMax(aJ[0][2], aL[aI]);
					var aE = F.getMinMax(aJ[1][2], aL[aI]);
					if (aF.max_o < aE.min_o || aF.min_o > aE.max_o) {
						return false
					}
				}
			}
			return true
		};
		aC.hitTestPolygonArc = function(aO, aD) {
			if (aC.hitPolygon(aO, aD[0], aD[1])) {
				return true
			}
			var aI, aH, aG, aN, aM, aL, aK, aE, aJ, aF;
			for (aI = 0, aG = aO.length; aI < aG; aI++) {
				aH = aI < aG - 1 ? aI + 1 : 0;
				aN = aO[aI], aM = aO[aH];
				aL = new F(aD[0] - aN[0], aD[1] - aN[1]), aK = new F(aM[0] - aN[0], aM[1] - aN[1]);
				aF = aK.normalize();
				aJ = F.dot(aL, aF);
				if (aJ <= 0) {
					if (aL.x * aL.x + aL.y * aL.y < aD[3]) {
						return true
					}
				} else {
					if (aJ * aJ < aK.x * aK.x + aK.y * aK.y) {
						aE = F.cross(aL, aF);
						if (aE * aE < aD[3]) {
							return true
						}
					}
				}
			}
			return false
		};
		aC.hitTestArc = function(aO, aM, aN, aF) {
			var aL = aO.getWidth() * 0.5,
				aJ = aM.getWidth() * 0.5,
				aH = aO._startX ? aO._startX() : aO.startX(),
				aG = aM._startX ? aM._startX() : aM.startX(),
				aE = aO._startY ? aO._startY() : aO.startY(),
				aD = aM._startY ? aM._startY() : aM.startY();
			if (typeof aN != W) {
				aH += (aL - aN);
				aE += (aL - aN);
				aL = aN
			}
			if (typeof aF != W) {
				aG += (aJ - aF);
				aD += (aJ - aF);
				aJ = aF
			}
			var aK = aH + aL - aG - aJ,
				aI = aE + aL - aD - aJ;
			return aK * aK + aI * aI < (aL + aJ) * (aL + aJ)
		};
		aC.hitTestRect = function(aJ, aH, aQ, aO) {
			var aM = aJ.getWidth(),
				aL = aH.getWidth(),
				aS = aJ.getHeight(),
				aR = aH.getHeight(),
				aG = aJ._startX ? aJ._startX() : aJ.startX(),
				aF = aH._startX ? aH._startX() : aH.startX(),
				aE = aJ._startY ? aJ._startY() : aJ.startY(),
				aD = aH._startY ? aH._startY() : aH.startY();
			if (typeof aQ != W) {
				aG += (aM - aQ[0]) * 0.5;
				aE += (aS - aQ[1]) * 0.5;
				aM = aQ[0];
				aS = aQ[1]
			}
			if (typeof aO != W) {
				aF += (aL - aO[0]) * 0.5;
				aD += (aR - aO[1]) * 0.5;
				aL = aO[0];
				aR = aO[1]
			}
			var aP = aG > aF ? aG : aF,
				aN = aE > aD ? aE : aD,
				aK = (aG + aM) > (aF + aL) ? (aF + aL) : (aG + aM),
				aI = (aE + aS) > (aD + aR) ? (aD + aR) : (aE + aS);
			return aP <= aK && aN <= aI
		};
		aC.hitTest = aC.hitTestRect;
		aC.setFrameRate = function(aD) {
			if (aC.frameRate) {
				clearInterval(aC.frameRate)
			}
			aC.speed = aD;
			aC.frameRate = setInterval(function() {
				aC.onShow()
			}, aD)
		};
		aC.ll_scaleX = function(aD) {
			return (aD - aC.left) * aC.width / aC.canvasStyleWidth
		};
		aC.ll_scaleY = function(aD) {
			return (aD - aC.top) * aC.height / aC.canvasStyleHeight
		};
		aC.ll_setStageSize = function(aD, aE) {
			aD = Math.ceil(aD);
			aE = Math.ceil(aE);
			aC.canvasObj.style.width = aD + "px";
			aC.canvasObj.style.height = aE + "px";
			aC.canvasStyleWidth = aD;
			aC.canvasStyleHeight = aE
		};
		aC.resize = function(aG, aJ) {
			var aF, aI, aH = 0,
				aE = 0,
				aK = au.innerWidth,
				aD = au.innerHeight;
			aC.innerWidth = aK;
			aC.innerHeight = aD;
			if (aG) {
				aF = aG
			}
			if (aJ) {
				aI = aJ
			}
			if (aC.stageScale == "noScale") {
				aF = aG || aC.width;
				aI = aJ || aC.height
			}
			switch (aC.stageScale) {
			case "exactFit":
				aF = aG || aK;
				aI = aJ || aD;
				break;
			case "noBorder":
				aF = aG || aK;
				aI = aJ || aC.height * aK / aC.width;
				switch (aC.align) {
				case ax.BOTTOM:
				case ax.BOTTOM_LEFT:
				case ax.BOTTOM_RIGHT:
				case ax.BOTTOM_MIDDLE:
					aH = aD - aI;
					break
				}
				break;
			case "showAll":
				if (aK / aD > aC.width / aC.height) {
					aI = aJ || aD;
					aF = aG || aC.width * aD / aC.height
				} else {
					aF = aG || aK;
					aI = aJ || aC.height * aK / aC.width
				}
			case "noScale":
			default:
				switch (aC.align) {
				case ax.BOTTOM:
				case ax.BOTTOM_LEFT:
					aH = aD - aI;
					break;
				case ax.RIGHT:
				case ax.TOP_RIGHT:
					aE = aK - aF;
					break;
				case ax.TOP_MIDDLE:
					aE = (aK - aF) * 0.5;
					break;
				case ax.BOTTOM_RIGHT:
					aH = aD - aI;
					aE = aK - aF;
					break;
				case ax.BOTTOM_MIDDLE:
					aH = aD - aI;
					aE = (aK - aF) * 0.5;
					break;
				case ax.MIDDLE:
					aH = (aD - aI) * 0.5;
					aE = (aK - aF) * 0.5;
					break;
				case ax.TOP:
				case ax.LEFT:
				case ax.TOP_LEFT:
				default:
				}
			}
			aC.canvasObj.style.marginTop = aH + "px";
			aC.canvasObj.style.marginLeft = aE + "px";
			if (aC.isOldFirefox) {
				aC.left = parseInt(aC.canvasObj.style.marginLeft);
				aC.top = parseInt(aC.canvasObj.style.marginTop)
			}
			aC.ll_setStageSize(aF, aI)
		};
		aC.sleep = function(aD) {
			var aE = new Date();
			while ((new Date().getTime() - aE.getTime()) < aD) {}
		};
		aC.screen = function(aD) {
			aC.displayState = aD;
			if (aC.stage) {
				if (typeof aC.displayState == "number") {
					aC.resize(aC.width * aC.displayState, aC.height * aC.displayState)
				} else {
					aC.resize()
				}
			}
		};
		return aC
	})();
	var aB = ac;
	var aw = ac;
	if (!Array.prototype.indexOf) {
		Array.prototype.indexOf = function(aD) {
			var aC = this.length >>> 0;
			var aE = Number(arguments[1]) || 0;
			aE = (aE < 0) ? Math.ceil(aE) : Math.floor(aE);
			if (aE < 0) {
				aE += aC
			}
			for (; aE < aC; aE++) {
				if (aE in this && this[aE] === aD) {
					return aE
				}
			}
			return -1
		}
	}
	if (!Array.isArray) {
		Array.isArray = function(aC) {
			return Object.prototype.toString.apply(aC) == "[object Array]"
		}
	}
	if (!Function.prototype.bind) {
		Function.prototype.bind = function(aC) {
			if (typeof this !== "function") {
				throw new TypeError("Function.prototype.bind - what is trying to be bound is not callable")
			}
			var aG = Array.prototype.slice.call(arguments, 1),
				aF = this,
				aD = function() {},
				aE = function() {
					return aF.apply(this instanceof aD && aC ? this : aC, aG.concat(Array.prototype.slice.call(arguments)))
				};
			aD.prototype = this.prototype;
			aE.prototype = new aD();
			return aE
		}
	}
	if (!Array.prototype.forEach) {
		Array.prototype.forEach = function(aI, aD) {
			var aF, aE;
			if (this == null) {
				throw new TypeError(" this is null or not defined")
			}
			var aH = Object(this);
			var aC = aH.length >>> 0;
			if (typeof aI !== "function") {
				throw new TypeError(aI + " is not a function")
			}
			if (arguments.length > 1) {
				aF = aD
			}
			aE = 0;
			while (aE < aC) {
				var aG;
				if (aE in aH) {
					aG = aH[aE];
					aI.call(aF, aG, aE, aH)
				}
				aE++
			}
		}
	}
	if (!Array.prototype.every) {
		Array.prototype.every = function(aE, aF) {
			var aH, aG;
			if (this == null) {
				throw new TypeError("this is null or not defined")
			}
			var aJ = Object(this);
			var aD = aJ.length >>> 0;
			if (typeof aE !== "function") {
				throw new TypeError()
			}
			if (arguments.length > 1) {
				aH = aF
			}
			aG = 0;
			while (aG < aD) {
				var aI;
				if (aG in aJ) {
					aI = aJ[aG];
					var aC = aE.call(aH, aI, aG, aJ);
					if (!aC) {
						return false
					}
				}
				aG++
			}
			return true
		}
	}
	if (!Array.prototype.some) {
		Array.prototype.some = function(aE) {
			if (this == null) {
				throw new TypeError("Array.prototype.some called on null or undefined")
			}
			if (typeof aE !== "function") {
				throw new TypeError()
			}
			var aG = Object(this);
			var aC = aG.length >>> 0;
			var aD = arguments.length >= 2 ? arguments[1] : void 0;
			for (var aF = 0; aF < aC; aF++) {
				if (aF in aG && aE.call(aD, aG[aF], aF, aG)) {
					return true
				}
			}
			return false
		}
	}
	if (!String.format) {
		String.format = function(aD) {
			var aC = Array.prototype.slice.call(arguments, 1);
			return aD.replace(/{(\d+)}/g, function(aE, aF) {
				return typeof aC[aF] != "undefined" ? aC[aF] : aE
			})
		}
	}
	if (Function.prototype.name === undefined && Object.defineProperty !== undefined) {
		Object.defineProperty(Function.prototype, "name", {
			get: function() {
				var aD = /function\s([^(]{1,})\(/;
				var aC = (aD).exec((this).toString());
				return (aC && aC.length > 1) ? aC[1].trim() : ""
			},
			set: function(aC) {}
		})
	}
	function J() {
		if (!ac.traceDebug) {
			return
		}
		var aE = document.getElementById("traceObject"),
			aD;
		if (J.arguments.length > 0 && aE == null) {
			var aG = document.createElement("DIV");
			aG.position = 0;
			aG.style.position = "absolute";
			document.body.appendChild(aG);
			aE = document.createElement("TEXTAREA");
			aE.id = "traceObject";
			aE.style.width = (au.innerWidth * 0.5) + "px";
			aE.style.height = "200px";
			var aC = document.createElement("BUTTON");
			aC.style.width = (au.innerWidth * 0.25) + "px";
			aC.innerHTML = "Hide";
			aG.appendChild(aC);
			y.addEventListener(aC, ac.mobile ? "touchstart" : "click", function(aH) {
				aE.style.display = (aE.style.display == "none" ? "" : "none")
			});
			aC = document.createElement("BUTTON");
			aC.style.width = (au.innerWidth * 0.25) + "px";
			aC.innerHTML = "position";
			aG.appendChild(aC);
			var aF = function(aH) {
					aG.position++;
					if (aG.position == 0) {
						aG.style.top = "5px";
						aG.style.left = "5px"
					} else {
						if (aG.position == 1) {
							aG.style.top = (au.innerHeight - 20 - parseInt(aE.style.height)) + "px";
							aG.style.left = "5px"
						} else {
							if (aG.position == 2) {
								aG.style.top = "5px";
								aG.style.left = (au.innerWidth - parseInt(aE.style.width)) + "px"
							} else {
								aG.style.top = (au.innerHeight - 20 - parseInt(aE.style.height)) + "px";
								aG.style.left = (au.innerWidth - parseInt(aE.style.width)) + "px";
								aG.position = -1
							}
						}
					}
				};
			aF();
			y.addEventListener(aC, ac.mobile ? "touchstart" : "click", aF);
			aG.appendChild(document.createElement("BR"));
			aG.appendChild(aE)
		}
		for (aD = 0; aD < J.arguments.length; aD++) {
			aE.value = aE.value + J.arguments[aD] + "\r\n";
			aE.scrollTop = aE.scrollHeight
		}
	}
	if (!au.console) {
		au.console = {
			log: J,
			warn: J
		}
	}
	function ak(aC) {
		ac.stage.addChild(aC)
	}
	function am(aC) {
		ac.stage.removeChild(aC)
	}
	var L = X;

	function B(aH, aC, aD) {
		var aF = null,
			aG = aH.constructor.prototype,
			aE = {};
		if (aH.constructor.name == "Object") {
			console.warn("When you use the extends. You must make a method like 'XX.prototype.xxx=function(){}'. but not 'XX.prototype={xxx:function(){}}'.")
		}
		if (typeof aH.__ll__parent__ == W) {
			aH.__ll__parent__ = [];
			aH.__ll__parent__ = []
		}
		aH.__ll__parent__.push(aC.prototype);
		for (aF in aG) {
			aE[aF] = 1
		}
		for (aF in aC.prototype) {
			if (!aE[aF]) {
				aG[aF] = aC.prototype[aF]
			}
		}
		if (aG.toString == Object.prototype.toString) {
			aG.toString = r.prototype.toString
		}
		aC.apply(aH, aD)
	}
	var E = B;

	function af() {
		return (new Date()).getTime() - ac.startTimer
	}
	function Y(aE) {
		var aC, aD = /([^#?]+\.)([^.#?]+)/;
		aC = aE.match(aD);
		if (aC.length >= 3) {
			return aC[2].toLowerCase()
		}
		return null
	}
	var r = (function() {
		function aC() {
			this.type = "LObject";
			this.objectIndex = ++ac.objectIndex;
			this.objectindex = this.objectIndex
		}
		aC.prototype = {
			callParent: function(aD, aF) {
				if (!aD || !aF) {
					return
				}
				var aG = this,
					aI = false,
					aH, aE = "__ll__parent_call" + aD;
				if (typeof aG[aE] == "undefined") {
					aI = true;
					aG[aE] = 0
				} else {
					aG[aE]++
				}
				if (aG[aE] >= aG.__ll__parent__.length) {
					return false
				}
				if (!aG.__ll__parent__[aG[aE]][aD]) {
					aH = aG.callParent(aD, aF)
				} else {
					aH = aG.__ll__parent__[aG[aE]][aD].apply(aG, aF)
				}
				if (aI) {
					delete aG[aE]
				}
				return aH
			},
			copyProperty: function(aD) {
				var aF = this,
					aE;
				for (aE in aD) {
					if (typeof aD[aE] == "number" || typeof aD[aE] == "string" || typeof aD[aE] == "boolean") {
						if (aE == "objectindex" || aE == "objectIndex") {
							continue
						}
						aF[aE] = aD[aE]
					} else {
						if (Array.isArray(aD[aE])) {
							aF[aE] = aD[aE].slice()
						}
					}
				}
				if (aD.mask) {
					aF.mask = aD.mask.clone()
				}
			},
			toString: function() {
				return "[object " + this.constructor.name + "]"
			}
		};
		return aC
	})();
	var T = (function() {
		function aC(aI, aD, aG, aF, aK, aH, aE, aL) {
			var aJ = this;
			E(aJ, r, []);
			aJ.redMultiplier = aI;
			aJ.greenMultiplier = aD;
			aJ.blueMultiplier = aG;
			aJ.alphaMultiplier = aF;
			aJ.redOffset = aK;
			aJ.greenOffset = aH;
			aJ.blueOffset = aE;
			aJ.alphaOffset = aL
		}
		return aC
	})();
	var c = (function() {
		function aC() {
			var aD = this;
			E(aD, r, []);
			aD.matrix = null
		}
		return aC
	})();
	var az = (function() {
		function aD(aK, aJ, aI, aH, aG, aF, aN, aM, aL) {
			var aO = this;
			E(aO, r, []);
			aO.a = 1;
			aO.b = 0;
			aO.u = 0;
			aO.c = 0;
			aO.d = 1;
			aO.v = 0;
			aO.tx = 0;
			aO.ty = 0;
			aO.w = 1;
			if (typeof aK != W) {
				aO.a = aK
			}
			if (typeof aJ != W) {
				aO.b = aJ
			}
			if (typeof aI != W) {
				aO.c = aI
			}
			if (typeof aH != W) {
				aO.d = aH
			}
			if (typeof aG != W) {
				aO.tx = aG
			}
			if (typeof aF != W) {
				aO.ty = aF
			}
			if (typeof aN != W) {
				aO.u = aN
			}
			if (typeof aM != W) {
				aO.v = aM
			}
			if (typeof aL != W) {
				aO.w = aL
			}
		}
		var aE = {
			setTo: function(aK, aJ, aI, aH, aG, aF, aN, aM, aL) {
				var aO = this;
				if (typeof aK != W) {
					aO.a = aK
				}
				if (typeof aJ != W) {
					aO.b = aJ
				}
				if (typeof aI != W) {
					aO.c = aI
				}
				if (typeof aH != W) {
					aO.d = aH
				}
				if (typeof aG != W) {
					aO.tx = aG
				}
				if (typeof aF != W) {
					aO.ty = aF
				}
				if (typeof aN != W) {
					aO.u = aN
				}
				if (typeof aM != W) {
					aO.v = aM
				}
				if (typeof aL != W) {
					aO.w = aL
				}
				return aO
			},
			isIdentity: function() {
				var aF = this;
				return (aF.a == 1 && aF.b == 0 && aF.c == 0 && aF.d == 1 && aF.tx == 0 && aF.ty == 0 && u == 0 && v == 0 && w == 1)
			},
			transform: function(aG) {
				var aF = this;
				aG.transform(aF.a, aF.b, aF.c, aF.d, aF.tx, aF.ty);
				return aF
			},
			identity: function() {
				this.setTo(1, 0, 0, 1, 0, 0, 0, 0, 1)
			},
			rotate: function(aJ) {
				var aH = this,
					aK = aJ * Math.PI / 180,
					aI = Math.cos(aK),
					aF = Math.sin(aK),
					aG = new aD(aI, aF, -aF, aI, 0, 0, 0, 0, 1);
				aH.add(aG);
				return aH
			},
			scale: function(aI, aH) {
				var aG = this,
					aF = new aD(aI, 0, 0, aH, 0, 0, 0, 0, 1);
				aG.add(aF);
				return aG
			},
			translate: function(aG, aF) {
				var aI = this,
					aH = new aD(1, 0, 0, 1, aG, aF, 0, 0, 1);
				aI.add(aH);
				return aI
			},
			skew: function(aI, aF) {
				var aH = this,
					aG = new aD(1, aF, aI, 1, 0, 0, 0, 0, 1);
				aH.add(aG);
				return aH
			},
			add: function(aF) {
				var aP = this,
					aL, aK, aJ, aI, aH, aG, aO, aN, aM;
				aL = aP.a * aF.a + aP.b * aF.c + aP.u * aF.tx;
				aK = aP.a * aF.b + aP.b * aF.d + aP.u * aF.ty;
				aO = aP.a * aF.u + aP.b * aF.v + aP.u * aF.w;
				aJ = aP.c * aF.a + aP.d * aF.c + aP.v * aF.tx;
				aI = aP.c * aF.b + aP.d * aF.d + aP.v * aF.ty;
				aN = aP.c * aF.u + aP.d * aF.v + aP.v * aF.w;
				aH = aP.tx * aF.a + aP.ty * aF.c + aP.w * aF.tx;
				aG = aP.tx * aF.b + aP.ty * aF.d + aP.w * aF.ty;
				aM = aP.tx * aF.u + aP.ty * aF.v + aP.w * aF.w;
				aP.setTo(aL, aK, aJ, aI, aH, aG, aO, aN, aM)
			},
			toArray: function(aF) {
				var aS = this;
				if (Array.isArray(aF) && aF.length == 3) {
					var aH = aF[0] * aS.a + aF[1] * aS.c + aF[2] * aS.tx,
						aG = aF[0] * aS.b + aF[1] * aS.d + aF[2] * aS.ty,
						aI = aF[0] * aS.u + aF[1] * aS.v + aF[2] * aS.w;
					return [aH, aG, aI]
				} else {
					var aO = aS.a * aF.a + aS.b * aF.c + aS.u * aF.tx,
						aN = aS.a * aF.b + aS.b * aF.d + aS.u * aF.ty,
						aR = aS.a * aF.u + aS.b * aF.v + aS.u * aF.w,
						aM = aS.c * aF.a + aS.d * aF.c + aS.v * aF.tx,
						aL = aS.c * aF.b + aS.d * aF.d + aS.v * aF.ty,
						aQ = aS.c * aF.u + aS.d * aF.v + aS.v * aF.w,
						aK = aS.tx * aF.a + aS.ty * aF.c + aS.w * aF.tx,
						aJ = aS.tx * aF.b + aS.ty * aF.d + aS.w * aF.ty,
						aP = aS.tx * aF.u + aS.ty * aF.v + aS.w * aF.w;
					return [aO, aN, aM, aL, aK, aJ, aR, aQ, aP]
				}
			},
			clone: function() {
				var aF = this;
				return new aD(aF.a, aF.b, aF.c, aF.d, aF.tx, aF.ty, aF.u, aF.v, aF.w)
			}
		};
		for (var aC in aE) {
			aD.prototype[aC] = aE[aC]
		}
		return aD
	})();
	var F = (function() {
		function aC(aD, aE) {
			this.x = aD || 0;
			this.y = aE || 0
		}
		aC.dot = function(aE, aD) {
			return aE.x * aD.x + aE.y * aD.y
		};
		aC.cross = function(aE, aD) {
			return aE.x * aD.y - aE.y * aD.x
		};
		aC.distance = function(aF, aE) {
			var aD = aF.x - aE.x;
			var aG = aF.y - aE.y;
			return Math.sqrt(aD * aD + aG * aG)
		};
		aC.getMinMax = function(aL, aF) {
			var aE = aC.dot(aL[0], aF);
			var aH = aC.dot(aL[0], aF);
			var aI = 0;
			var aK = 0;
			for (var aJ = 1; aJ < aL.length; aJ++) {
				var aG = aC.dot(aL[aJ], aF);
				if (aE > aG) {
					aE = aG;
					aI = aJ
				}
				if (aH < aG) {
					aH = aG;
					aK = aJ
				}
			}
			var aD = {
				min_o: aE,
				min_i: aI,
				max_o: aH,
				max_i: aK
			};
			return aD
		};
		aC.prototype = {
			length: function() {
				var aD = this;
				return Math.sqrt(aD.x * aD.x + aD.y * aD.y)
			},
			normalize: function() {
				var aE = this,
					aD = aE.length();
				return new aC(aE.x / aD, aE.y / aD)
			},
			normR: function() {
				return new aC(-this.y, this.x)
			},
			normL: function() {
				return new aC(this.y, -this.x)
			}
		};
		return aC
	})();
	var f = (function() {
		function aD() {
			var aF = this;
			E(aF, r, []);
			aF._eventList = new Array()
		}
		var aE = {
			addEventListener: function(aF, aG) {
				this._eventList.push({
					listener: aG,
					type: aF
				})
			},
			removeEventListener: function(aH, aJ) {
				var aG = this,
					aF, aI;
				aI = aG._eventList.length;
				for (aF = 0; aF < aI; aF++) {
					if (!aG._eventList[aF]) {
						continue
					}
					if (aH == aG._eventList[aF].type && (!aJ || aG._eventList[aF].listener == aJ)) {
						aG._eventList.splice(aF, 1);
						return
					}
				}
			},
			removeAllEventListener: function() {
				this._eventList = []
			},
			dispatchEvent: function(aJ) {
				var aH = this,
					aF, aI = aH._eventList.length,
					aG = (typeof aJ == "string") ? aJ : aJ.eventType;
				for (aF = 0; aF < aI; aF++) {
					if (!aH._eventList[aF]) {
						continue
					}
					if (aG == aH._eventList[aF].type) {
						if (typeof aJ == "string") {
							aH.currentTarget = aH.target = aH;
							aH.eventType = aH.event_type = aG;
							aH._eventList[aF].listener(aH);
							delete aH.currentTarget;
							delete aH.target;
							delete aH.eventType
						} else {
							if (!aJ.target) {
								aJ.target = aH
							}
							if (!aJ.currentTarget) {
								aJ.currentTarget = aJ.target
							}
							aJ._ll_preventDefault = false;
							aH._eventList[aF].listener(aJ);
							if (aJ._ll_preventDefault) {
								return false
							}
						}
						return true
					}
				}
				return false
			},
			hasEventListener: function(aH, aJ) {
				var aG = this,
					aF, aI = aG._eventList.length;
				for (aF = 0; aF < aI; aF++) {
					if (!aG._eventList[aF]) {
						continue
					}
					if (aH == aG._eventList[aF].type) {
						if (typeof aJ == W || aJ == aG._eventList[aF].listener) {
							return true
						}
					}
				}
				return false
			}
		};
		for (var aC in aE) {
			aD.prototype[aC] = aE[aC]
		}
		return aD
	})();
	(function() {
		if (g_config && g_config.test || _manage) {
			return
		}
		var aD = null;
		au.addEventListener("devicemotion", function aC(aE) {
			if (aD) {
				return
			}
			aD = aE.accelerationIncludingGravity
		}, false);
		$.ajaxPrefilter("*", function(aE, aG, aF) {
			if (aG.data && aG.data.awardInfoB && aG.data.info && aD) {
				aE.data += "&" + $.param({
					_devicemotion: $.toJSON(aD),
				});
				aD = null
			}
		})
	}());
	var P = (function() {
		function aE() {
			var aF = this;
			E(aF, f, []);
			aF.name = "instance" + aF.objectIndex;
			aF.x = 0;
			aF.y = 0;
			aF.width = 0;
			aF.height = 0;
			aF.scaleX = 1;
			aF.scaleY = 1;
			aF.alpha = 1;
			aF.visible = true;
			aF.rotate = 0;
			aF.mask = null;
			aF.blendMode = null;
			aF.filters = null;
			aF.transform = new c();
			aF.parent = null
		}
		var aD = {
			_createCanvas: function() {
				var aF = this;
				if (!aF._canvas) {
					aF._canvas = document.createElement("canvas");
					aF._context = aF._canvas.getContext("2d")
				}
			},
			ll_show: function() {
				var aF = this,
					aG = ac.canvas;
				if (!aF._canShow()) {
					return
				}
				aF._ll_trans = false;
				if (!ac.box2d && typeof aF._ll_loopframe == "function") {
					aF._ll_loopframe()
				}
				aG.save();
				aF._showReady(aG);
				if (aF.blendMode) {
					aG.globalCompositeOperation = aF.blendMode
				}
				if (aF.filters) {
					aF._ll_setFilters()
				}
				aF._rotateReady();
				if (aF.mask != null && aF.mask.ll_show) {
					aF.mask.ll_show();
					aG.clip()
				}
				aF._transformRotate();
				aF._transformScale();
				aF._coordinate(aG);
				if (aF.transform.matrix) {
					aF.transform.matrix.transform(aG)
				}
				if (aF.alpha < 1) {
					aF._ll_trans = true;
					aG.globalAlpha = aF.alpha
				}
				if (ac.fpsStatus) {
					ac.fpsStatus.display++;
					if (aF._ll_trans) {
						ac.fpsStatus.transform++
					}
				}
				if (aF._ll_cacheAsBitmap) {
					aF._ll_cacheAsBitmap._ll_show()
				} else {
					aF._ll_show(aG)
				}
				aG.restore();
				if (ac.box2d != null && typeof aF._ll_loopframe == "function") {
					aF._ll_loopframe()
				}
			},
			_canShow: function() {
				return this.visible
			},
			_coordinate: function(aG) {
				var aF = this;
				if (aF.x != 0 || aF.y != 0) {
					aF._ll_trans = true;
					aG.transform(1, 0, 0, 1, aF.x, aF.y)
				}
			},
			_rotateReady: function() {},
			_showReady: function(aF) {},
			_ll_show: function(aF) {},
			_ll_setFilters: function() {
				var aH = this,
					aI = aH.filters,
					aG, aF;
				if (!aI) {
					return
				}
				for (aG = 0, aF = aI.length; aG < aF; aG++) {
					aI[aG].ll_show(aH)
				}
			},
			startX: function() {
				return 0
			},
			startY: function() {
				return 0
			},
			getWidth: function() {
				return 1
			},
			getHeight: function() {
				return 1
			},
			_transformRotate: function() {
				var aF = this,
					aG;
				if (aF.rotate == 0) {
					return
				}
				aF._ll_trans = true;
				aG = ac.canvas, rotateFlag = Math.PI / 180, rotateObj = new az();
				if ((typeof aF.rotatex) == W) {
					aF.rotatex = 0;
					aF.rotatey = 0
				}
				if (aF.box2dBody) {
					rotateFlag = 1
				}
				rotateObj.a = Math.cos(aF.rotate * rotateFlag);
				rotateObj.b = Math.sin(aF.rotate * rotateFlag);
				rotateObj.c = -rotateObj.b;
				rotateObj.d = rotateObj.a;
				rotateObj.tx = aF.x + aF.rotatex;
				rotateObj.ty = aF.y + aF.rotatey;
				rotateObj.transform(aG).setTo(1, 0, 0, 1, -rotateObj.tx, -rotateObj.ty).transform(aG)
			},
			_transformScale: function() {
				var aF = this,
					aH = ac.canvas,
					aG;
				if (aF.scaleX == 1 && aF.scaleY == 1) {
					return
				}
				aF._ll_trans = true;
				aG = new az();
				if (aF.scaleX != 1) {
					aG.tx = aF.x
				}
				if (aF.scaleY != 1) {
					aG.ty = aF.y
				}
				aG.a = aF.scaleX;
				aG.d = aF.scaleY;
				aG.transform(aH).setTo(1, 0, 0, 1, -aG.tx, -aG.ty).transform(aH)
			},
			getAbsoluteScale: function() {
				var aF = this,
					aI, aH, aG;
				aI = aF.scaleX;
				aH = aF.scaleY;
				aG = aF.parent;
				while (aG && aG != "root") {
					aI *= aG.scaleX;
					aH *= aG.scaleY;
					aG = aG.parent
				}
				return {
					scaleX: aI,
					scaleY: aH
				}
			},
			getRootCoordinate: function() {
				return this.localToGlobal(new av(0, 0))
			},
			localToGlobal: function(aG) {
				var aH = this,
					aF, aJ, aI;
				m = aH.getRootMatrix();
				aI = m.toArray([aG.x, aG.y, 1]);
				return new av(aI[0], aI[1])
			},
			globalToLocal: function(aG) {
				var aH = this,
					aF, aJ, aI;
				m = aH.getLocalMatrix();
				aI = m.toArray([aG.x, aG.y, 1]);
				return new av(aI[0], aI[1])
			},
			getBounds: function(aK) {
				if (typeof aK == W) {
					return new N(0, 0, 0, 0)
				}
				var aI = this,
					aF = 0,
					aM = 0,
					aG = 0,
					aH = 0,
					aJ, aL;
				if (aI.objectIndex != aK.objectIndex) {
					aJ = aI.getRootCoordinate();
					aL = aK.getRootCoordinate();
					aF = aJ.x - aL.x;
					aM = aJ.y - aL.y
				}
				if (aK.getWidth) {
					aG = aK.getWidth()
				}
				if (aK.getHeight) {
					aH = aK.getHeight()
				}
				return new N(aF, aM, aG, aH)
			},
			cacheAsBitmap: function(aL, aM, aH) {
				var aN = this;
				if (!aL) {
					aN._ll_cacheAsBitmap = null;
					return
				}
				var aK = aN.x - aN.startX(),
					aI = aN.y - aN.startY();
				var aG = aN.getDataCanvas(aK, aI, aN.getWidth(), aN.getHeight());
				var aJ = new s(aG, 0, 0, null, null, s.DATA_CANVAS);
				var aF = new q(aJ, 0, 0, aN.getWidth(), aN.getHeight());
				aF.x = -aK;
				aF.y = -aI;
				aN._ll_cacheAsBitmap = aF
			},
			getDataCanvas: function(aN, aM, aO, aH) {
				var aP = this,
					aF, aG, aI, aK, aL, aJ;
				aP._createCanvas();
				aG = ac.canvasObj;
				aK = ac.canvas;
				aF = aP._canvas;
				aI = aP._context;
				aP.width = aO || aP.getWidth();
				aP.height = aH || aP.getHeight();
				aF.width = aP.width;
				aF.height = aP.height;
				aI.clearRect(0, 0, aP.width, aP.height);
				ac.canvasObj = aP._canvas;
				ac.canvas = aP._context;
				aL = aP.x;
				aJ = aP.y;
				aP.x = aN || 0;
				aP.y = aM || 0;
				aP.ll_show();
				aP.x = aL;
				aP.y = aJ;
				aP._canvas = aF;
				aP._context = aI;
				ac.canvasObj = aG;
				ac.canvas = aK;
				return aP._canvas
			},
			getDataURL: function() {
				var aF = this,
					aG = aF.getDataCanvas();
				return aG.toDataURL.apply(aG, arguments)
			},
			ismouseonShapes: function(aF, aM, aJ) {
				var aO = this,
					aK = aO,
					aH, aG, aI, aL, aN;
				if (typeof aF == W) {
					aF = aO.shapes
				}
				aH = aO.getRootMatrix();
				for (aI = aF.length - 1; aI >= 0; aI--) {
					aG = aF[aI];
					aN = aG.arg;
					aL = aO._changeShape(aG.type, aN, aH);
					if (aG.type == n.VERTICES) {
						if (ac.hitPolygon(aL, aM, aJ)) {
							return true
						}
					} else {
						if (aG.type == n.RECT) {
							if (ac.hitPolygon(aL, aM, aJ)) {
								return true
							}
						} else {
							if (aG.type == n.ARC) {
								if ((aL[0] - aM) * (aL[0] - aM) + (aL[1] - aJ) * (aL[1] - aJ) < aL[3]) {
									return true
								}
							}
						}
					}
				}
				return false
			},
			_changeShape: function(aJ, aN, aG) {
				var aM, aN = aN,
					aF, aI, aH, aL, aK;
				if (aJ == n.VERTICES) {
					aM = [];
					for (aI = 0, aH = aN.length; aI < aH; aI++) {
						aM[aI] = aG.toArray([aN[aI][0], aN[aI][1], 1])
					}
				} else {
					if (aJ == n.RECT) {
						aM = [
							[aN[0], aN[1]],
							[aN[0] + aN[2], aN[1]],
							[aN[0] + aN[2], aN[1] + aN[3]],
							[aN[0], aN[1] + aN[3]]
						];
						for (aI = 0, aH = aM.length; aI < aH; aI++) {
							aM[aI] = aG.toArray([aM[aI][0], aM[aI][1], 1])
						}
					} else {
						if (aJ == n.ARC) {
							aL = aG.toArray([aN[0], aN[1], 1]);
							aK = aG.toArray([aN[0] + aN[2], aN[1], 1]);
							aF = (aL[0] - aK[0]) * (aL[0] - aK[0]) + (aL[1] - aK[1]) * (aL[1] - aK[1]);
							aM = [aL[0], aL[1], Math.sqrt(aF), aF]
						}
					}
				}
				return aM
			},
			getRootMatrix: function() {
				var aG = this,
					aF = new az();
				while (aG && aG != "root") {
					if (aG.scaleX != 1 || aG.scaleY != 1) {
						aF.scale(aG.scaleX, aG.scaleY)
					}
					if (aG.rotate != 0) {
						aF.rotate(aG.rotate)
					}
					if (aG.x != 0 || aG.y != 0) {
						aF.translate(aG.x, aG.y)
					}
					aG = aG.parent
				}
				return aF
			},
			getLocalMatrix: function() {
				var aH = this,
					aF = new az(),
					aI = [];
				while (aH && aH != "root") {
					aI.push(aH);
					aH = aH.parent
				}
				for (var aG = aI.length - 1; aG >= 0; aG--) {
					aH = aI[aG];
					if (aH.x != 0 || aH.y != 0) {
						aF.translate(-aH.x, -aH.y)
					}
					if (aH.rotate != 0) {
						aF.rotate(-aH.rotate)
					}
					if (aH.scaleX != 1 || aH.scaleY != 1) {
						aF.scale(1 / aH.scaleX, 1 / aH.scaleY)
					}
				}
				return aF
			},
			remove: function() {
				var aF = this,
					aG = aF.parent;
				if (!aG || aG == "root") {
					return
				}
				aG.removeChild(aF);
				aF._ll_removeFromSelf = true
			}
		};
		for (var aC in aD) {
			aE.prototype[aC] = aD[aC]
		}
		return aE
	})();
	var h = (function() {
		function aC() {
			var aF = this;
			E(aF, P, []);
			aF.type = "LInteractiveObject";
			aF.mouseEnabled = true;
			aF.mouseList = new Array()
		}
		var aE = {
			addEventListener: function(aG, aH) {
				var aF = this;
				if (aG.indexOf("mouse") >= 0 || aG.indexOf("touch") >= 0 || aG == g.DOUBLE_CLICK) {
					if (al.container[aG] || ((aG == g.MOUSE_OVER || aG == g.MOUSE_OUT) && al.container[g.MOUSE_MOVE])) {
						al.addMouseEvent(aF, aG, aH);
						return
					}
					aF.mouseList.push({
						listener: aH,
						type: aG
					})
				} else {
					aF._eventList.push({
						listener: aH,
						type: aG
					})
				}
			},
			removeEventListener: function(aH, aJ) {
				var aG = this,
					aF, aI;
				if (aH.indexOf("mouse") >= 0 || aH.indexOf("touch") >= 0 || aH == g.DOUBLE_CLICK) {
					if (al.container[aH] || ((aH == g.MOUSE_OVER || aH == g.MOUSE_OUT) && al.container[g.MOUSE_MOVE])) {
						al.removeMouseEvent(aG, aH, aJ);
						return
					}
					aI = aG.mouseList.length;
					for (aF = 0; aF < aI; aF++) {
						if (!aG.mouseList[aF]) {
							continue
						}
						if (aH == aG.mouseList[aF].type && aG.mouseList[aF].listener == aJ) {
							aG.mouseList.splice(aF, 1);
							return
						}
					}
				} else {
					return aG.callParent("removeEventListener", arguments)
				}
			},
			removeAllEventListener: function() {
				var aF = this;
				aF.mouseList.length = 0;
				aF._eventList.length = 0;
				if (al.container[g.MOUSE_DOWN]) {
					al.removeMouseEvent(aF, g.MOUSE_DOWN)
				}
				if (al.container[g.MOUSE_UP]) {
					al.removeMouseEvent(aF, g.MOUSE_UP)
				}
				if (al.container[g.MOUSE_MOVE]) {
					al.removeMouseEvent(aF, g.MOUSE_MOVE);
					al.removeMouseEvent(aF, g.MOUSE_OVER);
					al.removeMouseEvent(aF, g.MOUSE_OUT)
				}
			},
			hasEventListener: function(aH, aJ) {
				var aG = this,
					aF, aI;
				if (al.container[aH]) {
					return al.hasEventListener(aG, aH, aJ)
				}
				if (aH.indexOf("mouse") >= 0 || aH.indexOf("touch") >= 0 || aH == g.DOUBLE_CLICK) {
					aI = aG.mouseList.length;
					for (aF = 0; aF < aI; aF++) {
						if (!aG.mouseList[aF]) {
							continue
						}
						if (aH == aG.mouseList[aF].type && (!aJ || aG.mouseList[aF].listener == aJ)) {
							return true
						}
					}
				} else {
					return aG.callParent("hasEventListener", arguments)
				}
				return false
			}
		};
		for (var aD in aE) {
			aC.prototype[aD] = aE[aD]
		}
		return aC
	})();
	var ae = (function() {
		function aE() {
			var aF = this;
			E(aF, h, []);
			aF.childList = new Array();
			aF.numChildren = 0;
			aF.mouseChildren = true
		}
		var aD = {
			addChild: function(aH) {
				var aG = this,
					aF;
				if (aH.parent) {
					aF = ac.destroy;
					ac.destroy = false;
					aH.parent.removeChild(aH);
					ac.destroy = aF
				}
				aH.parent = aG;
				aG.childList.push(aH);
				aG.numChildren = aG.childList.length;
				aG._ll_removeFromSelf = false;
				return aH
			},
			addChildAt: function(aI, aG) {
				var aH = this,
					aF;
				if (aG < 0 || aG > aH.childList.length) {
					return
				}
				if (typeof aI.remove == "function") {
					aF = ac.destroy;
					ac.destroy = false;
					aI.remove();
					ac.destroy = aF
				}
				aI.parent = aH;
				aH.childList.splice(aG, 0, aI);
				aH.numChildren = aH.childList.length;
				aH._ll_removeFromSelf = false;
				return aI
			},
			removeChild: function(aI) {
				var aH = this,
					aJ = aH.childList,
					aG, aF;
				for (aG = 0, aF = aJ.length; aG < aF; aG++) {
					if (aI.objectIndex == aJ[aG].objectIndex) {
						if (ac.destroy && aI.die) {
							aI.die()
						}
						aH.childList.splice(aG, 1);
						break
					}
				}
				aH.numChildren = aH.childList.length;
				delete aI.parent
			},
			getChildAt: function(aF) {
				var aG = this,
					aH = aG.childList;
				if (aH.length == 0 || aH.length <= aF) {
					return null
				}
				return aH[aF]
			},
			getChildByName: function(aJ) {
				var aH = this,
					aI = aH.childList,
					aG, aF;
				for (aG = 0, aF = aI.length; aG < aF; aG++) {
					if (!aI[aG]) {
						continue
					}
					if (aI[aG].name == aJ) {
						return aI[aG]
					}
				}
				return null
			},
			removeChildAt: function(aF) {
				var aG = this,
					aI = aG.childList;
				if (aI.length <= aF) {
					return
				}
				if (ac.destroy && aI[aF].die) {
					aI[aF].die()
				}
				var aH = aG.childList.splice(aF, 1);
				aG.numChildren = aG.childList.length;
				return aH
			},
			getChildIndex: function(aJ) {
				if (!aJ) {
					return -1
				}
				var aH = this,
					aI = aH.childList,
					aG, aF = aI.length;
				for (aG = 0; aG < aF; aG++) {
					if (aI[aG].objectIndex == aJ.objectIndex) {
						return aG
					}
				}
				return -1
			},
			setChildIndex: function(aK, aG) {
				var aI = this,
					aJ = aI.childList,
					aH, aF = aJ.length;
				if (aK.parent == "root" || aK.parent.objectIndex != aI.objectIndex || aG < 0 || aG >= aF) {
					return -1
				}
				for (aH = 0; aH < aF; aH++) {
					if (aJ[aH].objectIndex == aK.objectIndex) {
						break
					}
				}
				aI.childList.splice(aH, 1);
				aI.childList.splice(aG, 0, aK);
				return aG
			},
			resize: function() {
				var aF = this;
				aF.width = aF.getWidth();
				aF.height = aF.getHeight()
			},
			removeAllChild: function() {
				var aH = this,
					aI = aH.childList,
					aG, aF;
				for (aG = 0, aF = aI.length; aG < aF; aG++) {
					if (ac.destroy && aI[aG].die) {
						aI[aG].die()
					}
				}
				aH.childList.length = 0;
				aH.width = 0;
				aH.height = 0;
				aH.numChildren = 0
			}
		};
		for (var aC in aD) {
			aE.prototype[aC] = aD[aC]
		}
		return aE
	})();
	var S = (function() {
		function aD() {
			var aG = this;
			E(aG, f, []);
			aG.currentTime = 0;
			aG.currentStart = 0;
			aG.currentSave = 0;
			aG.length = 0;
			aG.loopStart = 0;
			aG.loopEnd = 0;
			aG.loopIndex = 0;
			aG.loopLength = 1;
			aG.playing = false;
			aG.volume = 1;
			aG.soundType = "LWebAudio";
			aG.soundCache = [];
			a.Container.add(aG)
		}
		aD.container = [];
		aD.containerCount = 0;
		try {
			aD.audioTag = new Audio()
		} catch (aF) {
			HdGame.tlog("ReferenceError: Can't find variable: Audio");
			aD.audioTag = {
				canPlayType: function() {
					return false
				}
			}
		}
		aD._context = null;
		var aE = {
			getWebAudio: function() {
				var aG;
				if (aD.containerCount > 0) {
					aG = aD.container.shift()
				} else {
					if (typeof AudioContext !== W) {
						try {
							aG = new AudioContext()
						} catch (aH) {
							aD.containerCount = aD.container.length;
							aG = aD.container.shift()
						}
					} else {
						if (typeof webkitAudioContext !== W) {
							try {
								aG = new webkitAudioContext()
							} catch (aH) {
								aD.containerCount = aD.container.length;
								aG = aD.container.shift()
							}
						} else {
							throw "AudioContext not supported. :("
						}
					}
				}
				if (!aG.createGainNode) {
					aG.createGainNode = aG.createGain
				}
				aD.container.push(aG);
				return aG
			},
			onload: function(aH) {
				var aG = this;
				if (Object.prototype.toString.apply(aH) !== "[object AudioBuffer]") {
					aG.load(aH);
					return
				}
				if (!aG.data) {
					aG.data = aG.getWebAudio()
				}
				aG.buffer = aH;
				aG.length = aG.buffer.duration;
				var aI = new y(y.COMPLETE);
				aI.currentTarget = aG;
				aI.target = aG.buffer;
				aG.dispatchEvent(aI)
			},
			_onended: function() {
				var aG = this;
				aG.dispatchEvent(y.SOUND_COMPLETE);
				aG.close();
				if (++aG.loopIndex < aG.loopLength) {
					aG.play(aG.currentStart, undefined, aG.currentTimeTo)
				}
			},
			load: function(aN) {
				var aO = this;
				if (typeof aN !== "string") {
					if (Object.prototype.toString.apply(aN) == "[object AudioBuffer]") {
						aO.onload(aN)
					} else {
						if (Object.prototype.toString.apply(aN) == "[object ArrayBuffer]") {
							if (!aO.data) {
								aO.data = aO.getWebAudio()
							}
							aO.data.decodeAudioData(aN, aO.onload.bind(aO), function(aP) {
								throw "AudioContext decodeAudioData error : " + aP.toString()
							})
						}
					}
					return
				}
				var aM, aL, aK, aH, aJ, aG = {
					mov: ["quicktime"],
					"3gp": ["3gpp"],
					midi: ["midi"],
					mid: ["midi"],
					ogv: ["ogg"],
					m4a: ["acc"],
					mp3: ["mpeg"],
					wav: ["wav", "x-wav", "wave"],
					wave: ["wav", "x-wav", "wave"],
					aac: ["mp4", "aac"]
				};
				aM = aN.split(",");
				for (aH = 0; aH < aM.length; aH++) {
					aL = aM[aH].split(".");
					aJ = aL[aL.length - 1];
					if (aG[aJ]) {
						aJ = aG[aJ]
					} else {
						aJ = [aJ]
					}
					aK = aJ.some(function(aQ, aP, aR) {
						return aD.audioTag.canPlayType(aO._type + "/" + aQ)
					});
					if (aK) {
						ab.responseType = ab.ARRAY_BUFFER;
						ab.get(aM[aH], {}, aO.onload.bind(aO));
						return
					} else {
						HdGame.tlog("Not support " + aL[aL.length - 1] + " : " + aM[aH]);
						var aI = new y(y.COMPLETE);
						aI.currentTarget = aI.target = aO;
						aO.dispatchEvent(aI)
					}
				}
			},
			getCurrentTime: function() {
				var aG = this;
				if (aG.playing) {
					return aG.data.currentTime - aG.currentSave + aG.currentTime
				} else {
					return aG.currentSave
				}
			},
			setVolume: function(aG) {
				var aH = this;
				aH.volume = aG;
				if (aH.playing) {
					aH.volumeNode.gain.value = aG
				}
			},
			getVolume: function() {
				return this.volume
			},
			play: function(aJ, aG, aI) {
				var aH = this;
				if (aH.length == 0) {
					return
				}
				if (aG === "loop") {
					aH.loopIndex = 0;
					aH.loopLength = 99999
				} else {
					if (typeof aG !== W) {
						aH.loopIndex = 0;
						aH.loopLength = aG
					}
				}
				if (typeof aJ !== W) {
					aH.currentTime = aJ;
					aH.currentStart = aJ
				}
				if (typeof aI !== W) {
					aH.currentTimeTo = aI > aH.length ? aH.length : aI
				} else {
					aH.currentTimeTo = aH.length
				}
				if (aH.playing && aH.bufferSource) {
					aH.soundCache.push(aH.bufferSource)
				}
				aH.data.loop = false;
				aH.playing = true;
				if (aH.timeout) {
					clearTimeout(aH.timeout);
					delete aH.timeout
				}
				aH.timeout = setTimeout(aH._onended.bind(aH), (aH.currentTimeTo - aH.currentTime) * 1000);
				aH.bufferSource = aH.data.createBufferSource();
				aH.bufferSource.buffer = aH.buffer;
				aH.volumeNode = aH.data.createGainNode();
				aH.volumeNode.gain.value = aH.volume;
				aH.volumeNode.connect(aH.data.destination);
				aH.bufferSource.connect(aH.volumeNode);
				aH.currentSave = aH.data.currentTime;
				if (aH.bufferSource.start) {
					aH.bufferSource.start(0, aH.currentTime, aH.length - aH.currentTime)
				} else {
					aH.bufferSource.noteGrainOn(0, aH.currentTime, aH.length - aH.currentTime)
				}
			},
			playSegment: function(aI, aH, aG) {
				this.playTo(aI, aI + aH, aG)
			},
			playTo: function(aI, aH, aG) {
				this.play(aI, aG, aH)
			},
			stopCache: function() {
				var aH = this;
				var aI = null;
				for (var aG = 0; aG < aH.soundCache.length; aG++) {
					aI = aH.soundCache[aG];
					if (aI.stop) {
						aI.stop(0)
					} else {
						aI.noteOff(0)
					}
				}
				aH.soundCache = []
			},
			stop: function() {
				var aG = this;
				if (!aG.playing) {
					return
				}
				if (aG.timeout) {
					clearTimeout(aG.timeout);
					delete aG.timeout
				}
				if (aG.bufferSource.stop) {
					aG.bufferSource.stop(0)
				} else {
					aG.bufferSource.noteOff(0)
				}
				aG.stopCache();
				aG.currentSave = aG.getCurrentTime();
				aG.currentTime = aG.currentSave;
				aG.playing = false
			},
			close: function() {
				var aG = this;
				if (!aG.playing) {
					return
				}
				if (aG.timeout) {
					clearTimeout(aG.timeout);
					delete aG.timeout
				}
				if (aG.bufferSource.stop) {
					aG.bufferSource.stop(0)
				} else {
					aG.bufferSource.noteOff(0)
				}
				aG.stopCache();
				aG.playing = false;
				aG.currentTime = 0;
				aG.currentSave = 0
			},
			ll_check: function() {
				var aG = this;
				if (!aG.playing) {
					return
				}
				if (aG.currentTimeTo < aG.data.currentTime - aG.currentSave + a.Container.time * 0.001) {
					aG._onended()
				}
			},
			die: function() {
				a.Container.remove(this)
			}
		};
		for (var aC in aE) {
			aD.prototype[aC] = aE[aC]
		}
		return aD
	})();
	var x = (function() {
		function aD() {
			var aF = this;
			E(aF, P, []);
			aF.length = 0;
			aF.loopIndex = 0;
			aF.loopLength = 1;
			aF.playing = false;
			aF.oncomplete = null;
			aF.onsoundcomplete = null;
			aF.currentStart = 0;
			aF.soundType = "LMedia";
			a.Container.add(this)
		}
		var aE = {
			onload: function() {
				var aF = this;
				if (aF.data.readyState) {
					aF.length = aF.data.duration - (ac.android ? 0.1 : 0);
					var aG = new y(y.COMPLETE);
					aG.currentTarget = aF;
					aG.target = aF.data;
					aF.dispatchEvent(aG);
					aF.data.removeEventListener("canplaythrough", aF._canplaythrough, false);
					return
				}
				aF._canplaythrough = function() {
					aF.onload()
				};
				aF.data.addEventListener("canplaythrough", aF._canplaythrough, false)
			},
			_onended: function() {
				var aH = this,
					aG, aF;
				aH.dispatchEvent(y.SOUND_COMPLETE);
				if (++aH.loopIndex < aH.loopLength) {
					aG = aH.loopIndex;
					aF = aH.loopLength;
					aH.close();
					aH.play(aH.currentStart, aH.loopLength, aH.currentTimeTo);
					aH.loopIndex = aG
				} else {
					aH.close()
				}
			},
			load: function(aM) {
				var aN = this;
				if (Object.prototype.toString.apply(aM) == "[object HTMLAudioElement]") {
					aN.data = aM;
					aN.onload();
					return
				}
				var aL, aK, aJ, aG, aI, aF = {
					mov: ["quicktime"],
					"3gp": ["3gpp"],
					midi: ["midi"],
					mid: ["midi"],
					ogv: ["ogg"],
					m4a: ["acc"],
					mp3: ["mpeg"],
					wav: ["wav", "x-wav", "wave"],
					wave: ["wav", "x-wav", "wave"],
					aac: ["mp4", "aac"]
				};
				aL = aM.split(",");
				for (aG = 0; aG < aL.length; aG++) {
					aK = aL[aG].split(".");
					aI = aK[aK.length - 1];
					if (aF[aI]) {
						aI = aF[aI]
					} else {
						aI = [aI]
					}
					aJ = aI.some(function(aP, aO, aQ) {
						return aN.data.canPlayType(aN._type + "/" + aP)
					});
					if (aJ) {
						aN.data.src = aL[aG];
						aN.onload();
						aN.data.load();
						return
					} else {
						HdGame.tlog("Not support " + aK[aK.length - 1] + " : " + aL[aG]);
						var aH = new y(y.COMPLETE);
						aH.currentTarget = aH.target = aN;
						aN.dispatchEvent(aH)
					}
				}
				if (aN.oncomplete) {
					aN.oncomplete({})
				}
			},
			getCurrentTime: function() {
				return this.data.currentTime
			},
			setVolume: function(aF) {
				this.data.volume = aF
			},
			getVolume: function() {
				return this.data.volume
			},
			play: function(aI, aF, aH) {
				var aG = this;
				if (typeof aI != W) {
					aG.data.currentTime = aI
				}
				if (typeof aF != W) {
					aG.data.loop = aF
				}
				aG.data.play()
			},
			playSegment: function(aH, aG, aF) {
				this.playTo(aH, aH + aG, aF)
			},
			playTo: function(aH, aG, aF) {
				this.play(aH, aF, aG)
			},
			stop: function() {
				var aF = this;
				aF.data.pause()
			},
			close: function() {
				var aF = this;
				aF.data.pause();
				aF.data.currentTime = 0;
				aF.currentSave = 0
			},
			ll_check: function() {
				var aF = this;
				if (!aF.playing) {
					return
				}
				if (aF.data.duration != aF._ll_duration) {
					aF._ll_duration = aF.data.duration;
					aF.length = aF.data.duration - (ac.android ? 0.1 : 0)
				}
				if (aF.currentTimeTo < aF.data.currentTime + a.Container.time * 0.005) {
					aF._onended()
				}
			},
			die: function() {
				a.Container.remove(this)
			}
		};
		for (var aC in aE) {
			aD.prototype[aC] = aE[aC]
		}
		return aD
	})();
	var a = (function() {
		function aC(aF) {
			var aG = this;
			aG.type = "LSound";
			aG._type = "audio";
			if (aC.webAudioEnabled && ac.webAudio) {
				E(aG, S, [])
			} else {
				E(aG, x, []);
				try {
					aG.data = new Audio()
				} catch (aH) {
					HdGame.tlog("ReferenceError: Can't find variable: Audio");
					aG.data = {}
				}
				aG.data.loop = false;
				aG.data.autoplay = false;
				aG.playing = false;
				aG.data.addEventListener("play", function() {
					aG.playing = true
				}, false);
				aG.data.addEventListener("pause", function() {
					aG.playing = false
				}, false)
			}
			if (aF) {
				aG.load(aF)
			}
		}
		aC.TYPE_SOUND = "sound";
		aC.webAudioEnabled = false;
		var aE = location.protocol;
		if (aE == "http:" || aE == "https:") {
			if (typeof AudioContext !== W) {
				try {
					S._context = new AudioContext()
				} catch (aD) {}
			} else {
				if (typeof webkitAudioContext !== W) {
					try {
						S._context = new webkitAudioContext()
					} catch (aD) {}
				}
			}
			if (S._context) {
				S.container.push(S._context);
				aC.webAudioEnabled = true
			}
		}
		aC.Container = {
			ll_save: 0,
			time: 0,
			list: [],
			ll_show: function() {
				var aI = aC.Container;
				var aH = (new Date()).getTime();
				aI.time = aH - (aI.ll_save ? aI.ll_save : aH);
				aI.ll_save = aH;
				var aF = aI.list;
				for (var aG = aF.length - 1; aG >= 0; aG--) {
					if (aF[aG]) {
						aF[aG].ll_check()
					}
				}
			},
			add: function(aF) {
				if (aC.Container.list.indexOf(aF) >= 0) {
					return
				}
				aC.Container.list.push(aF)
			},
			remove: function(aH) {
				var aF = aC.Container.list;
				for (var aG = aF.length - 1; aG >= 0; aG--) {
					if (aF[aG].objectIndex == aH.objectIndex) {
						aF.splice(aG, 1);
						break
					}
				}
			},
			stopOther: function(aH) {
				var aF = aC.Container.list;
				for (var aG = aF.length - 1; aG >= 0; aG--) {
					if (aF[aG].objectIndex != aH.objectIndex) {
						aF[aG].stop()
					}
				}
			}
		};
		ac.childList.push(aC.Container);
		return aC
	})();
	var av = (function() {
		function aC(aD, aF) {
			var aE = this;
			aE.x = aD;
			aE.y = aF
		}
		aC.distance = function(aE, aD) {
			return aC.distance2(aE.x, aE.y, aD.x, aD.y)
		};
		aC.distance2 = function(aF, aH, aE, aG) {
			var aD = aF - aE,
				aI = aH - aG;
			return Math.sqrt(aD * aD + aI * aI)
		};
		aC.interpolate = function(aF, aE, aD) {
			return new aC(aF.x + (aE.x - aF.x) * (1 - aD), aF.y + (aE.y - aF.y) * (1 - aD))
		};
		aC.polar = function(aE, aD) {
			return new aC(aE * Math.cos(aD), aE * Math.sin(aD))
		};
		aC.prototype = {
			toString: function() {
				return "[object LPoint(" + this.x + "," + this.y + ")]"
			},
			length: function() {
				return aC.distance2(this.x, this.y, 0, 0)
			},
			add: function(aD) {
				return new aC(this.x + aD.x, this.y + aD.y)
			},
			clone: function() {
				return new aC(this.x, this.y)
			},
			setTo: function(aD, aE) {
				this.x = aD, this.y = aE
			},
			copyFrom: function(aD) {
				this.setTo(aD.x, aD.y)
			},
			equals: function(aD) {
				return this.x == aD.x && this.y == aD.y
			},
			normalize: function(aD) {
				var aE = this,
					aF = aD / aE.length();
				aE.x *= aF, aE.y *= aF
			},
			offset: function(aE, aD) {
				this.x += aE;
				this.y += aD
			},
			subtract: function(aD) {
				return new aC(this.x - aD.x, this.y - aD.y)
			}
		};
		return aC
	})();
	var N = (function() {
		function aC(aD, aH, aE, aG) {
			var aF = this;
			aF.x = aD;
			aF.y = aH;
			aF.width = aE;
			aF.height = aG;
			aF.setRectangle()
		}
		aC.prototype = {
			setRectangle: function() {
				var aD = this;
				aD.bottom = aD.y + aD.height;
				aD.right = aD.x + aD.width;
				aD.left = aD.x;
				aD.top = aD.y
			},
			clone: function() {
				var aD = this;
				return new aC(aD.x, aD.y, aD.width, aD.height)
			},
			contains: function(aD, aF) {
				var aE = this;
				return aD >= aE.x && aD <= aE.right && aF >= aE.y && aF <= aE.bottom
			},
			containsRect: function(aE) {
				var aD = this;
				return aE.x >= aD.x && aE.right <= aD.right && aE.y >= aD.y && aE.bottom <= aD.bottom
			},
			equals: function(aD) {
				var aE = this;
				return aD.x == aE.x && aD.width == aE.width && aD.y == aE.y && aD.height == aE.height
			},
			inflate: function(aE, aD) {
				var aF = this;
				aF.width += aE;
				aF.height += aD;
				aF.setRectangle()
			},
			intersection: function(aF) {
				var aG = this;
				var aE = aG.x > aF.x ? aG.x : aF.x;
				var aD = aG.y > aF.y ? aG.y : aF.y;
				var aI = aG.right > aF.right ? aF.right : aG.right;
				var aH = aG.bottom > aF.bottom ? aF.bottom : aG.bottom;
				if (aE <= aI && aD <= aH) {
					return new aC(aE, aD, aI, aH)
				} else {
					return new aC(0, 0, 0, 0)
				}
			},
			intersects: function(aF) {
				var aG = this;
				var aE = aG.x > aF.x ? aG.x : aF.x;
				var aD = aG.y > aF.y ? aG.y : aF.y;
				var aI = aG.right > aF.right ? aF.right : aG.right;
				var aH = aG.bottom > aF.bottom ? aF.bottom : aG.bottom;
				return aE <= aI && aD <= aH
			},
			isEmpty: function() {
				var aD = this;
				return aD.x == 0 && aD.y == 0 && aD.width == 0 && aD.height == 0
			},
			offset: function(aE, aD) {
				var aF = this;
				aF.x += aE;
				aF.y += aD;
				aF.setRectangle()
			},
			setEmpty: function() {
				var aD = this;
				aD.x = 0;
				aD.y = 0;
				aD.width = 0;
				aD.height = 0;
				aD.setRectangle()
			},
			setTo: function(aH, aE, aD, aG) {
				var aF = this;
				aF.x = aH;
				aF.y = aE;
				aF.width = aD;
				aF.height = aG;
				aF.setRectangle()
			},
			toString: function() {
				var aD = this;
				return "[object LRectangle(" + aD.x + "," + aD.y + "," + aD.width + "," + aD.height + ")]"
			},
			union: function(aD) {
				var aE = this;
				return new aC(aE.x > aD.x ? aD.x : aE.x, aE.y > aD.y ? aD.y : aE.y, aE.right > aD.right ? aE.right : aD.right, aE.bottom > aD.bottom ? aE.bottom : aD.bottom)
			}
		};
		return aC
	})();
	var l = (function() {
		function aD() {
			var aF = this;
			E(aF, r, []);
			aF.type = "LGraphics";
			aF.color = "#000000";
			aF.alpha = 1;
			aF.bitmap = null;
			aF.setList = new Array();
			aF.showList = new Array()
		}
		var aE = {
			ll_show: function() {
				var aH = this,
					aG, aF = aH.setList.length;
				if (aF == 0) {
					return
				}
				for (aG = 0; aG < aF; aG++) {
					aH.setList[aG].call(aH);
					if (ac.fpsStatus) {
						ac.fpsStatus.graphics++
					}
				}
			},
			clone: function() {
				var aI = this,
					aG = new aD(),
					aH, aF, aJ;
				aG.color = aI.color;
				aG.alpha = aI.alpha;
				aG.bitmap = aI.bitmap;
				for (aH = 0, aF = aI.setList.length; aH < aF; aH++) {
					aJ = aI.setList[aH];
					aG.setList.push(aJ)
				}
				for (aH = 0, aF = aI.showList.length; aH < aF; aH++) {
					aJ = aI.showList[aH];
					aG.showList.push(aJ)
				}
				return aG
			},
			lineCap: function(aF) {
				var aG = this;
				aG.setList.push(function() {
					ac.canvas.lineCap = aF
				})
			},
			lineJoin: function(aF) {
				var aG = this;
				aG.setList.push(function() {
					ac.canvas.lineJoin = aF
				})
			},
			lineWidth: function(aF) {
				var aG = this;
				aG.setList.push(function() {
					ac.canvas.lineWidth = aF
				})
			},
			strokeStyle: function(aG) {
				var aF = this;
				aF.setList.push(function() {
					ac.canvas.strokeStyle = aG
				})
			},
			stroke: function() {
				var aF = this;
				aF.setList.push(function() {
					ac.canvas.stroke()
				})
			},
			beginPath: function() {
				var aF = this;
				aF.setList.push(function() {
					ac.canvas.beginPath()
				})
			},
			closePath: function() {
				var aF = this;
				aF.setList.push(function() {
					ac.canvas.closePath()
				})
			},
			moveTo: function(aF, aH) {
				var aG = this;
				aG.setList.push(function() {
					ac.canvas.moveTo(aF, aH)
				});
				aG.showList.push({
					type: n.POINT,
					arg: [aF, aH]
				})
			},
			lineTo: function(aF, aH) {
				var aG = this;
				aG.setList.push(function() {
					ac.canvas.lineTo(aF, aH)
				});
				aG.showList.push({
					type: n.POINT,
					arg: [aF, aH]
				})
			},
			rect: function(aF, aJ, aG, aI) {
				var aH = this;
				aH.setList.push(function() {
					ac.canvas.rect(aF, aJ, aG, aI)
				});
				aH.showList.push({
					type: n.RECT,
					arg: [aF, aJ, aG, aI]
				})
			},
			fillStyle: function(aG) {
				var aF = this;
				aF.setList.push(function() {
					ac.canvas.fillStyle = aG
				})
			},
			fill: function() {
				var aF = this;
				aF.setList.push(function() {
					ac.canvas.fill()
				})
			},
			arc: function(aG, aL, aJ, aF, aI, aK) {
				var aH = this;
				aH.setList.push(function() {
					ac.canvas.arc(aG, aL, aJ, aF, aI, aK)
				});
				aH.showList.push({
					type: n.ARC,
					arg: aF
				})
			},
			lineStyle: function(aF, aH) {
				var aG = this,
					aI;
				if (aH == null) {
					aH = aG.color
				}
				aG.color = aH;
				aG.setList.push(function() {
					aI = ac.canvas;
					aI.lineWidth = aF;
					aI.strokeStyle = aH
				})
			},
			clear: function() {
				var aF = this;
				aF.bitmap = null;
				aF.setList.length = 0;
				aF.showList.length = 0
			},
			beginBitmapFill: function(aF) {
				var aG = this;
				aG.setList.push(function() {
					aG.bitmap = aF
				})
			},
			drawEllipse: function(aF, aJ, aI, aG, aK) {
				var aH = this;
				aH.setList.push(function() {
					var aS, aU, aT, aV, aP, aO, aN, aL, aW, aR, aQ, aM;
					aS = ac.canvas;
					aS.beginPath();
					aO = 0.5522848;
					aU = aI[0];
					aT = aI[1];
					aV = aI[2];
					aP = aI[3];
					aN = (aV / 2) * aO;
					aL = (aP / 2) * aO;
					aW = aU + aV;
					aR = aT + aP;
					aQ = aU + aV / 2;
					aM = aT + aP / 2;
					aS.moveTo(aU, aM);
					aS.bezierCurveTo(aU, aM - aL, aQ - aN, aT, aQ, aT);
					aS.bezierCurveTo(aQ + aN, aT, aW, aM - aL, aW, aM);
					aS.bezierCurveTo(aW, aM + aL, aQ + aN, aR, aQ, aR);
					aS.bezierCurveTo(aQ - aN, aR, aU, aM + aL, aU, aM);
					if (aH.bitmap) {
						aS.save();
						aS.clip();
						aS.drawImage(aH.bitmap.image, aH.bitmap.x, aH.bitmap.y, aH.bitmap.width, aH.bitmap.height, 0, 0, aH.bitmap.width, aH.bitmap.height);
						aS.restore();
						aH.bitmap = null;
						return
					}
					if (aG) {
						aS.fillStyle = aK;
						aS.fill()
					}
					if (aF > 0) {
						aS.lineWidth = aF;
						aS.strokeStyle = aJ;
						aS.stroke()
					}
				});
				aH.showList.push({
					type: n.RECT,
					arg: aI
				})
			},
			drawArc: function(aF, aJ, aI, aG, aL, aK) {
				var aH = this;
				aH.setList.push(function() {
					var aM = ac.canvas;
					aM.beginPath();
					if (aI.length > 6 && aI[6] && !aK) {
						aM.moveTo(aI[0], aI[1])
					}
					aM.arc(aI[0], aI[1], aI[2], aI[3], aI[4], aI[5]);
					if (aI.length > 6 && aI[6] && !aK) {
						aM.lineTo(aI[0], aI[1])
					}
					if (aH.bitmap) {
						aM.save();
						aM.clip();
						aM.drawImage(aH.bitmap.image, aH.bitmap.x, aH.bitmap.y, aH.bitmap.width, aH.bitmap.height, 0, 0, aH.bitmap.width, aH.bitmap.height);
						aM.restore();
						aH.bitmap = null;
						return
					}
					if (aG) {
						aM.fillStyle = aL;
						aM.fill()
					}
					if (aF > 0) {
						aM.lineWidth = aF;
						aM.strokeStyle = aJ;
						aM.stroke()
					}
				});
				aH.showList.push({
					type: n.ARC,
					arg: aI
				})
			},
			drawRect: function(aF, aJ, aI, aG, aK) {
				var aH = this;
				aH.setList.push(function() {
					var aL = ac.canvas;
					aL.beginPath();
					aL.rect(aI[0], aI[1], aI[2], aI[3]);
					aL.closePath();
					if (aH.bitmap) {
						aL.save();
						aL.clip();
						aL.drawImage(aH.bitmap.image, aH.bitmap.x, aH.bitmap.y, aH.bitmap.width, aH.bitmap.height, 0, 0, aH.bitmap.width, aH.bitmap.height);
						aL.restore();
						aH.bitmap = null;
						return
					}
					if (aG) {
						aL.fillStyle = aK;
						aL.fill()
					}
					if (aF > 0) {
						aL.lineWidth = aF;
						aL.strokeStyle = aJ;
						aL.stroke()
					}
				});
				aH.showList.push({
					type: n.RECT,
					arg: aI
				})
			},
			drawRoundRect: function(aF, aJ, aI, aG, aK) {
				var aH = this;
				aH.setList.push(function() {
					var aL = ac.canvas;
					aL.beginPath();
					aL.moveTo(aI[0] + aI[4], aI[1]);
					aL.lineTo(aI[0] + aI[2] - aI[4], aI[1]);
					aL.arcTo(aI[0] + aI[2], aI[1], aI[0] + aI[2], aI[1] + aI[4], aI[4]);
					aL.lineTo(aI[0] + aI[2], aI[1] + aI[3] - aI[4]);
					aL.arcTo(aI[0] + aI[2], aI[1] + aI[3], aI[0] + aI[2] - aI[4], aI[1] + aI[3], aI[4]);
					aL.lineTo(aI[0] + aI[4], aI[1] + aI[3]);
					aL.arcTo(aI[0], aI[1] + aI[3], aI[0], aI[1] + aI[3] - aI[4], aI[4]);
					aL.lineTo(aI[0], aI[1] + aI[4]);
					aL.arcTo(aI[0], aI[1], aI[0] + aI[4], aI[1], aI[4]);
					aL.closePath();
					if (aH.bitmap) {
						aL.save();
						aL.clip();
						aL.drawImage(aH.bitmap.image, 0, 0, aH.bitmap.width, aH.bitmap.height, 0, 0, aH.bitmap.width, aH.bitmap.height);
						aL.restore();
						aH.bitmap = null;
						return
					}
					if (aG) {
						aL.fillStyle = aK;
						aL.fill()
					}
					if (aF > 0) {
						aL.lineWidth = aF;
						aL.strokeStyle = aJ;
						aL.stroke()
					}
				});
				aH.showList.push({
					type: n.RECT,
					arg: aI
				})
			},
			drawVertices: function(aF, aJ, aG, aH, aK) {
				var aI = this;
				if (aG.length < 3) {
					return
				}
				aI.setList.push(function() {
					var aO = ac.canvas;
					aO.beginPath();
					aO.moveTo(aG[0][0], aG[0][1]);
					var aM, aL = aG.length,
						aN;
					for (aM = 1; aM < aL; aM++) {
						aN = aG[aM];
						aO.lineTo(aN[0], aN[1])
					}
					aO.lineTo(aG[0][0], aG[0][1]);
					aO.closePath();
					if (aI.bitmap) {
						aO.save();
						aO.clip();
						aO.drawImage(aI.bitmap.image, aI.bitmap.x, aI.bitmap.y, aI.bitmap.width, aI.bitmap.height, 0, 0, aI.bitmap.width, aI.bitmap.height);
						aO.restore();
						aI.bitmap = null;
						return
					}
					if (aH) {
						aO.fillStyle = aK;
						aO.fill()
					}
					if (aF > 0) {
						aO.lineWidth = aF;
						aO.strokeStyle = aJ;
						aO.closePath();
						aO.stroke()
					}
				});
				aI.showList.push({
					type: n.VERTICES,
					arg: aG
				})
			},
			drawTriangles: function(aK, aF, aN, aM, aG) {
				var aO = this;
				var aJ, aI, aH = aF.length,
					aL;
				aO.setList.push(function() {
					aL = ac.canvas;
					var aY = aK,
						aV, aP, aX;
					for (aJ = 0, aI = 0; aJ < aH; aJ += 3) {
						aV = 0;
						aL.save();
						aL.beginPath();
						aL.moveTo(aY[aF[aJ] * 2], aY[aF[aJ] * 2 + 1]);
						aL.lineTo(aY[aF[aJ + 1] * 2], aY[aF[aJ + 1] * 2 + 1]);
						aL.lineTo(aY[aF[aJ + 2] * 2], aY[aF[aJ + 2] * 2 + 1]);
						aL.lineTo(aY[aF[aJ] * 2], aY[aF[aJ] * 2 + 1]);
						aL.closePath();
						if (aM) {
							aL.lineWidth = aM;
							aL.strokeStyle = aG;
							aL.stroke()
						}
						aL.clip();
						if (aJ % 6 == 0) {
							aX = -1;
							var aW = (aN[aF[aJ + 1 + aI] * 2] - aN[aF[aJ + aI] * 2]) * aO.bitmap.width;
							var aS = (aN[aF[aJ + 2] * 2 + 1] - aN[aF[aJ] * 2 + 1]) * aO.bitmap.height;
							if (aI == 0 && aW < 0) {
								for (aP = aJ + 9; aP < aH; aP += 3) {
									if (aN[aF[aJ + 2] * 2 + 1] == aN[aF[aP + 2] * 2 + 1]) {
										aI = aP - aJ;
										break
									}
								}
								if (aI == 0) {
									aI = aH - aJ
								}
								aW = (aN[aF[aJ + 1 + aI] * 2] - aN[aF[aJ + aI] * 2]) * aO.bitmap.width
							}
							if (aJ + aI >= aH) {
								aW = (aN[aF[aJ + aI - aH] * 2] - aN[aF[aJ + 1] * 2]) * aO.bitmap.width;
								aX = aN[aF[aJ] * 2] == 1 ? 0 : aO.bitmap.width * aN[aF[aJ] * 2] + aW;
								if (aX > aO.bitmap.width) {
									aX -= aO.bitmap.width
								}
							} else {
								aX = aO.bitmap.width * aN[aF[aJ + aI] * 2]
							}
							sh = aO.bitmap.height * aN[aF[aJ] * 2 + 1];
							if (aS < 0) {
								aS = (aN[aF[aJ + 2 - (aJ > 0 ? 6 : -6)] * 2 + 1] - aN[aF[aJ - (aJ > 0 ? 6 : -6)] * 2 + 1]) * aO.bitmap.height;
								sh = 0
							}
							var aU = (aY[aF[aJ + 1] * 2] - aY[aF[aJ] * 2]) / aW;
							var aT = (aY[aF[aJ + 1] * 2 + 1] - aY[aF[aJ] * 2 + 1]) / aW;
							var aR = (aY[aF[aJ + 2] * 2] - aY[aF[aJ] * 2]) / aS;
							var aQ = (aY[aF[aJ + 2] * 2 + 1] - aY[aF[aJ] * 2 + 1]) / aS;
							aL.transform(aU, aT, aR, aQ, aY[aF[aJ] * 2], aY[aF[aJ] * 2 + 1]);
							aL.drawImage(aO.bitmap.image, aO.bitmap.x + aX, aO.bitmap.y + sh, aW, aS, 0, 0, aW, aS)
						} else {
							var aW = (aN[aF[aJ + 2 + aI] * 2] - aN[aF[aJ + 1 + aI] * 2]) * aO.bitmap.width;
							var aS = (aN[aF[aJ + 2] * 2 + 1] - aN[aF[aJ] * 2 + 1]) * aO.bitmap.height;
							if (aI == 0 && aW < 0) {
								for (aP = aJ + 9; aP < aH; aP += 3) {
									if (aN[aF[aJ + 2] * 2 + 1] == aN[aF[aP + 2] * 2 + 1]) {
										aI = aP - aJ;
										break
									}
								}
								if (aI == 0) {
									aI = aH - aJ
								}
								aW = (aN[aF[aJ + 2 + aI] * 2] - aN[aF[aJ + 1 + aI] * 2]) * aO.bitmap.width
							}
							if (aJ + 1 + aI >= aH) {
								aW = (aN[aF[aJ + 1 + aI - aH] * 2] - aN[aF[aJ + 2] * 2]) * aO.bitmap.width;
								aX = aN[aF[aJ + 1] * 2] == 1 ? 0 : aO.bitmap.width * aN[aF[aJ + 1] * 2] + aW;
								if (aX > aO.bitmap.width) {
									aX -= aO.bitmap.width
								}
							} else {
								aX = aO.bitmap.width * aN[aF[aJ + 1 + aI] * 2]
							}
							sh = aO.bitmap.height * aN[aF[aJ] * 2 + 1];
							if (aS < 0) {
								aS = (aN[aF[aJ + 2 - (aJ > 0 ? 6 : -6)] * 2 + 1] - aN[aF[aJ - (aJ > 0 ? 6 : -6)] * 2 + 1]) * aO.bitmap.height;
								sh = 0
							}
							var aU = (aY[aF[aJ + 2] * 2] - aY[aF[aJ + 1] * 2]) / aW;
							var aT = (aY[aF[aJ + 2] * 2 + 1] - aY[aF[aJ + 1] * 2 + 1]) / aW;
							var aR = (aY[aF[aJ + 2] * 2] - aY[aF[aJ] * 2]) / aS;
							var aQ = (aY[aF[aJ + 2] * 2 + 1] - aY[aF[aJ] * 2 + 1]) / aS;
							aL.transform(aU, aT, aR, aQ, aY[aF[aJ + 1] * 2], aY[aF[aJ + 1] * 2 + 1]);
							aL.drawImage(aO.bitmap.image, aO.bitmap.x + aX, aO.bitmap.y + sh, aW, aS, 0, -aS, aW, aS)
						}
						aL.restore()
					}
				})
			},
			drawLine: function(aF, aI, aH) {
				var aG = this;
				aG.setList.push(function() {
					var aJ = ac.canvas;
					aJ.beginPath();
					aJ.moveTo(aH[0], aH[1]);
					aJ.lineTo(aH[2], aH[3]);
					aJ.lineWidth = aF;
					aJ.strokeStyle = aI;
					aJ.closePath();
					aJ.stroke()
				});
				aG.showList.push({
					type: n.LINE,
					arg: aH
				})
			},
			add: function(aF) {
				this.setList.push(aF)
			},
			remove: function(aG) {
				for (var aF = 0, aH = this.setList.length; aF < aH; aF++) {
					if (this.setList[aF] === aG) {
						this.setList.splice(aF, 1);
						return
					}
				}
			},
			ismouseon: function(aG, aH) {
				var aF = this;
				if (aG == null || aG == W || aF.showList.length == 0 || !aF.parent) {
					return false
				}
				return aF.parent.ismouseonShapes(aF.showList, aG.offsetX, aG.offsetY)
			},
			getWidth: function() {
				var aL = this,
					aJ, aM, aK, aF, aI, aH, aG;
				for (aJ = 0, aH = aL.showList.length; aJ < aH; aJ++) {
					if (aL.showList[aJ].type == n.RECT) {
						if (aK > aL.showList[aJ].arg[0] || typeof aK == W) {
							aK = aL.showList[aJ].arg[0]
						}
						if (aF < aL.showList[aJ].arg[0] + aL.showList[aJ].arg[2] || typeof aF == W) {
							aF = aL.showList[aJ].arg[0] + aL.showList[aJ].arg[2]
						}
					} else {
						if (aL.showList[aJ].type == n.ARC) {
							if (aK > aL.showList[aJ].arg[0] - aL.showList[aJ].arg[2] || typeof aK == W) {
								aK = aL.showList[aJ].arg[0] - aL.showList[aJ].arg[2]
							}
							if (aF < aL.showList[aJ].arg[0] + aL.showList[aJ].arg[2] || typeof aF == W) {
								aF = aL.showList[aJ].arg[0] + aL.showList[aJ].arg[2]
							}
						} else {
							if (aL.showList[aJ].type == n.VERTICES) {
								for (aM = 0, aG = aL.showList[aJ].arg.length; aM < aG; aM++) {
									aI = aL.showList[aJ].arg[aM];
									if (aK > aI[0] || typeof aK == W) {
										aK = aI[0]
									}
									if (aF < aI[0] || typeof aF == W) {
										aF = aI[0]
									}
								}
							} else {
								if (aL.showList[aJ].type == n.LINE) {
									if (aK > aL.showList[aJ].arg[0] || typeof aK == W) {
										aK = aL.showList[aJ].arg[0]
									}
									if (aK > aL.showList[aJ].arg[2] || typeof aK == W) {
										aK = aL.showList[aJ].arg[2]
									}
									if (aF < aL.showList[aJ].arg[0] || typeof aF == W) {
										aF = aL.showList[aJ].arg[0]
									}
									if (aF < aL.showList[aJ].arg[2] || typeof aF == W) {
										aF = aL.showList[aJ].arg[2]
									}
								} else {
									if (aL.showList[aJ].type == n.POINT) {
										if (aK > aL.showList[aJ].arg[0] || typeof aK == W) {
											aK = aL.showList[aJ].arg[0]
										}
										if (aF < aL.showList[aJ].arg[0] || typeof aF == W) {
											aF = aL.showList[aJ].arg[0]
										}
									}
								}
							}
						}
					}
				}
				if (typeof aK == W) {
					aK = aF = 0
				}
				aL.left = aK;
				if (aH > 0 && aF == aK) {
					aF = aK + 1
				}
				return aF - aK
			},
			getHeight: function() {
				var aL = this,
					aJ = null,
					aM = null,
					aH, aG, aK, aF, aI;
				for (aJ = 0, aH = aL.showList.length; aJ < aH; aJ++) {
					if (aL.showList[aJ].type == n.RECT) {
						if (aK > aL.showList[aJ].arg[1] || typeof aK == W) {
							aK = aL.showList[aJ].arg[1]
						}
						if (aF < aL.showList[aJ].arg[1] + aL.showList[aJ].arg[3] || typeof aF == W) {
							aF = aL.showList[aJ].arg[1] + aL.showList[aJ].arg[3]
						}
					} else {
						if (aL.showList[aJ].type == n.ARC) {
							if (aK > aL.showList[aJ].arg[1] - aL.showList[aJ].arg[2] || typeof aK == W) {
								aK = aL.showList[aJ].arg[1] - aL.showList[aJ].arg[2]
							}
							if (aF < aL.showList[aJ].arg[1] + aL.showList[aJ].arg[2] || typeof aF == W) {
								aF = aL.showList[aJ].arg[1] + aL.showList[aJ].arg[2]
							}
						} else {
							if (aL.showList[aJ].type == n.VERTICES) {
								for (aM = 0, aG = aL.showList[aJ].arg.length; aM < aG; aM++) {
									aI = aL.showList[aJ].arg[aM];
									if (aK > aI[1] || typeof aK == W) {
										aK = aI[1]
									}
									if (aF < aI[1] || typeof aF == W) {
										aF = aI[1]
									}
								}
							} else {
								if (aL.showList[aJ].type == n.LINE) {
									if (aK > aL.showList[aJ].arg[1] || typeof aK == W) {
										aK = aL.showList[aJ].arg[1]
									}
									if (aK > aL.showList[aJ].arg[3] || typeof aK == W) {
										aK = aL.showList[aJ].arg[3]
									}
									if (aF < aL.showList[aJ].arg[1] || typeof aF == W) {
										aF = aL.showList[aJ].arg[1]
									}
									if (aF < aL.showList[aJ].arg[3] || typeof aF == W) {
										aF = aL.showList[aJ].arg[3]
									}
								} else {
									if (aL.showList[aJ].type == n.POINT) {
										if (aK > aL.showList[aJ].arg[1] || typeof aK == W) {
											aK = aL.showList[aJ].arg[1]
										}
										if (aF < aL.showList[aJ].arg[1] || typeof aF == W) {
											aF = aL.showList[aJ].arg[1]
										}
									}
								}
							}
						}
					}
				}
				if (typeof aK == W) {
					aK = aF = 0
				}
				aL.top = aK;
				if (aH > 0 && aF == aK) {
					aF = aK + 1
				}
				return aF - aK
			},
			startX: function() {
				var aF = this;
				aF.getWidth();
				return aF.left
			},
			startY: function() {
				var aF = this;
				aF.getHeight();
				return aF.top
			}
		};
		for (var aC in aE) {
			aD.prototype[aC] = aE[aC]
		}
		return aD
	})();
	var n = (function() {
		function aC(aF) {
			var aG = this;
			E(aG, h, []);
			aG.type = "LShape";
			aG.graphics = new l();
			aG.graphics.parent = aG;
			if (aF) {
				ak(aG)
			}
		}
		aC.POINT = "point";
		aC.LINE = "line";
		aC.ARC = "arc";
		aC.RECT = "rect";
		aC.VERTICES = "vertices";
		var aE = {
			_ll_show: function(aG) {
				var aF = this;
				aF.graphics.ll_show()
			},
			getWidth: function(aH) {
				var aG = this,
					aJ, aK, aI = aG.graphics.startX(),
					aF = aI + aG.graphics.getWidth();
				if (aH && aG.mask) {
					aJ = aG.mask._startX ? aG.mask._startX() : aG.mask.startX();
					aK = aG.mask.getWidth();
					if (aI < aJ) {
						aI = aJ
					}
					if (aF > aJ + aK) {
						aF = aJ + aK
					}
				}
				aG.ll_left = aG.x + aI;
				aG.ll_right = aG.x + aF;
				return (aF - aI) * aG.scaleX
			},
			getHeight: function(aI) {
				var aH = this,
					aK, aG, aJ = aH.graphics.startY(),
					aF = aJ + aH.graphics.getHeight();
				if (aI && aH.mask) {
					aK = aH.mask._startY ? aH.mask._startY() : aH.mask.startY();
					aG = aH.mask.getHeight();
					if (aJ < aK) {
						aJ = aK
					}
					if (aF > aK + aG) {
						aF = aK + aG
					}
				}
				aH.ll_top = aH.y + aJ;
				aH.ll_bottom = aH.y + aF;
				return (aF - aJ) * aH.scaleY
			},
			_startX: function() {
				var aF = this;
				aF.getWidth();
				return aF.ll_left
			},
			startX: function() {
				var aF = this;
				return aF._startX() * aF.scaleX
			},
			_startY: function() {
				var aF = this;
				aF.getHeight();
				return aF.ll_top
			},
			startY: function() {
				var aF = this;
				return aF._startY() * aF.scaleY
			},
			clone: function() {
				var aG = this,
					aF = new aC(),
					aI, aH;
				aF.copyProperty(aG);
				aF.graphics = aG.graphics.clone();
				aF.graphics.parent = aF;
				return aF
			},
			ismouseon: function(aH, aJ) {
				var aG = this,
					aF = false,
					aI;
				if (!aG.visible || aH == null) {
					return false
				}
				if (aG.mask) {
					if (!aG.mask.parent) {
						aG.mask.parent = aG.parent
					}
					if (!aG.mask.ismouseon(aH, aJ)) {
						return false
					}
				}
				aI = {
					x: aG.x * aJ.scaleX + aJ.x,
					y: aG.y * aJ.scaleY + aJ.y,
					scaleX: aJ.scaleX * aG.scaleX,
					scaleY: aJ.scaleY * aG.scaleY
				};
				if (aG.graphics) {
					aF = aG.graphics.ismouseon(aH, aI)
				}
				return aF
			},
			die: function() {
				var aF = this;
				aF.graphics.clear()
			}
		};
		for (var aD in aE) {
			aC.prototype[aD] = aE[aD]
		}
		return aC
	})();
	(function(aR) {
		if (typeof _manage == "undefined") {
			return
		}
		"use strict";
		var aH = function(a7) {
				var a3, a2, a0, aZ, a5 = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1, -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -1, -1, -1, -1, -1];
				var a4, a6, a1;
				a7 = a7.slice(0, 1) + a7.slice(2);
				a6 = a7.length;
				a4 = 0;
				a1 = "";
				while (a4 < a6) {
					do {
						a3 = a5[a7.charCodeAt(a4++) & 255]
					} while (a4 < a6 && a3 == -1);
					if (a3 == -1) {
						break
					}
					do {
						a2 = a5[a7.charCodeAt(a4++) & 255]
					} while (a4 < a6 && a2 == -1);
					if (a2 == -1) {
						break
					}
					a1 += String.fromCharCode((a3 << 2) | ((a2 & 48) >> 4));
					do {
						a0 = a7.charCodeAt(a4++) & 255;
						if (a0 == 61) {
							return a1
						}
						a0 = a5[a0]
					} while (a4 < a6 && a0 == -1);
					if (a0 == -1) {
						break
					}
					a1 += String.fromCharCode(((a2 & 15) << 4) | ((a0 & 60) >> 2));
					do {
						aZ = a7.charCodeAt(a4++) & 255;
						if (aZ == 61) {
							return a1
						}
						aZ = a5[aZ]
					} while (a4 < a6 && aZ == -1);
					if (aZ == -1) {
						break
					}
					a1 += String.fromCharCode(((a0 & 3) << 6) | aZ)
				}
				return a1
			};

		function aQ(aZ, a2) {
			var a1 = (aZ & 65535) + (a2 & 65535),
				a0 = (aZ >> 16) + (a2 >> 16) + (a1 >> 16);
			return (a0 << 16) | (a1 & 65535)
		}
		function aX(aZ, a0) {
			return (aZ << a0) | (aZ >>> (32 - a0))
		}
		function aE(a4, a1, a0, aZ, a3, a2) {
			return aQ(aX(aQ(aQ(a1, a4), aQ(aZ, a2)), a3), a0)
		}
		function aD(a1, a0, a5, a4, aZ, a3, a2) {
			return aE((a0 & a5) | ((~a0) & a4), a1, a0, aZ, a3, a2)
		}
		function aJ(a1, a0, a5, a4, aZ, a3, a2) {
			return aE((a0 & a4) | (a5 & (~a4)), a1, a0, aZ, a3, a2)
		}
		function aP(a1, a0, a5, a4, aZ, a3, a2) {
			return aE(a0 ^ a5 ^ a4, a1, a0, aZ, a3, a2)
		}
		function aC(a1, a0, a5, a4, aZ, a3, a2) {
			return aE(a5 ^ (a0 | (~a4)), a1, a0, aZ, a3, a2)
		}
		function aF(a9, a4) {
			a9[a4 >> 5] |= 128 << ((a4) % 32);
			a9[(((a4 + 64) >>> 9) << 4) + 14] = a4;
			var a1, a3, a2, a0, aZ, a8 = 1732584193,
				a7 = -271733879,
				a6 = -1732584194,
				a5 = 271733878;
			for (a1 = 0; a1 < a9.length; a1 += 16) {
				a3 = a8;
				a2 = a7;
				a0 = a6;
				aZ = a5;
				a8 = aD(a8, a7, a6, a5, a9[a1], 7, -680876936);
				a5 = aD(a5, a8, a7, a6, a9[a1 + 1], 12, -389564586);
				a6 = aD(a6, a5, a8, a7, a9[a1 + 2], 17, 606105819);
				a7 = aD(a7, a6, a5, a8, a9[a1 + 3], 22, -1044525330);
				a8 = aD(a8, a7, a6, a5, a9[a1 + 4], 7, -176418897);
				a5 = aD(a5, a8, a7, a6, a9[a1 + 5], 12, 1200080426);
				a6 = aD(a6, a5, a8, a7, a9[a1 + 6], 17, -1473231341);
				a7 = aD(a7, a6, a5, a8, a9[a1 + 7], 22, -45705983);
				a8 = aD(a8, a7, a6, a5, a9[a1 + 8], 7, 1770035416);
				a5 = aD(a5, a8, a7, a6, a9[a1 + 9], 12, -1958414417);
				a6 = aD(a6, a5, a8, a7, a9[a1 + 10], 17, -42063);
				a7 = aD(a7, a6, a5, a8, a9[a1 + 11], 22, -1990404162);
				a8 = aD(a8, a7, a6, a5, a9[a1 + 12], 7, 1804603682);
				a5 = aD(a5, a8, a7, a6, a9[a1 + 13], 12, -40341101);
				a6 = aD(a6, a5, a8, a7, a9[a1 + 14], 17, -1502002290);
				a7 = aD(a7, a6, a5, a8, a9[a1 + 15], 22, 1236535329);
				a8 = aJ(a8, a7, a6, a5, a9[a1 + 1], 5, -165796510);
				a5 = aJ(a5, a8, a7, a6, a9[a1 + 6], 9, -1069501632);
				a6 = aJ(a6, a5, a8, a7, a9[a1 + 11], 14, 643717713);
				a7 = aJ(a7, a6, a5, a8, a9[a1], 20, -373897302);
				a8 = aJ(a8, a7, a6, a5, a9[a1 + 5], 5, -701558691);
				a5 = aJ(a5, a8, a7, a6, a9[a1 + 10], 9, 38016083);
				a6 = aJ(a6, a5, a8, a7, a9[a1 + 15], 14, -660478335);
				a7 = aJ(a7, a6, a5, a8, a9[a1 + 4], 20, -405537848);
				a8 = aJ(a8, a7, a6, a5, a9[a1 + 9], 5, 568446438);
				a5 = aJ(a5, a8, a7, a6, a9[a1 + 14], 9, -1019803690);
				a6 = aJ(a6, a5, a8, a7, a9[a1 + 3], 14, -187363961);
				a7 = aJ(a7, a6, a5, a8, a9[a1 + 8], 20, 1163531501);
				a8 = aJ(a8, a7, a6, a5, a9[a1 + 13], 5, -1444681467);
				a5 = aJ(a5, a8, a7, a6, a9[a1 + 2], 9, -51403784);
				a6 = aJ(a6, a5, a8, a7, a9[a1 + 7], 14, 1735328473);
				a7 = aJ(a7, a6, a5, a8, a9[a1 + 12], 20, -1926607734);
				a8 = aP(a8, a7, a6, a5, a9[a1 + 5], 4, -378558);
				a5 = aP(a5, a8, a7, a6, a9[a1 + 8], 11, -2022574463);
				a6 = aP(a6, a5, a8, a7, a9[a1 + 11], 16, 1839030562);
				a7 = aP(a7, a6, a5, a8, a9[a1 + 14], 23, -35309556);
				a8 = aP(a8, a7, a6, a5, a9[a1 + 1], 4, -1530992060);
				a5 = aP(a5, a8, a7, a6, a9[a1 + 4], 11, 1272893353);
				a6 = aP(a6, a5, a8, a7, a9[a1 + 7], 16, -155497632);
				a7 = aP(a7, a6, a5, a8, a9[a1 + 10], 23, -1094730640);
				a8 = aP(a8, a7, a6, a5, a9[a1 + 13], 4, 681279174);
				a5 = aP(a5, a8, a7, a6, a9[a1], 11, -358537222);
				a6 = aP(a6, a5, a8, a7, a9[a1 + 3], 16, -722521979);
				a7 = aP(a7, a6, a5, a8, a9[a1 + 6], 23, 76029189);
				a8 = aP(a8, a7, a6, a5, a9[a1 + 9], 4, -640364487);
				a5 = aP(a5, a8, a7, a6, a9[a1 + 12], 11, -421815835);
				a6 = aP(a6, a5, a8, a7, a9[a1 + 15], 16, 530742520);
				a7 = aP(a7, a6, a5, a8, a9[a1 + 2], 23, -995338651);
				a8 = aC(a8, a7, a6, a5, a9[a1], 6, -198630844);
				a5 = aC(a5, a8, a7, a6, a9[a1 + 7], 10, 1126891415);
				a6 = aC(a6, a5, a8, a7, a9[a1 + 14], 15, -1416354905);
				a7 = aC(a7, a6, a5, a8, a9[a1 + 5], 21, -57434055);
				a8 = aC(a8, a7, a6, a5, a9[a1 + 12], 6, 1700485571);
				a5 = aC(a5, a8, a7, a6, a9[a1 + 3], 10, -1894986606);
				a6 = aC(a6, a5, a8, a7, a9[a1 + 10], 15, -1051523);
				a7 = aC(a7, a6, a5, a8, a9[a1 + 1], 21, -2054922799);
				a8 = aC(a8, a7, a6, a5, a9[a1 + 8], 6, 1873313359);
				a5 = aC(a5, a8, a7, a6, a9[a1 + 15], 10, -30611744);
				a6 = aC(a6, a5, a8, a7, a9[a1 + 6], 15, -1560198380);
				a7 = aC(a7, a6, a5, a8, a9[a1 + 13], 21, 1309151649);
				a8 = aC(a8, a7, a6, a5, a9[a1 + 4], 6, -145523070);
				a5 = aC(a5, a8, a7, a6, a9[a1 + 11], 10, -1120210379);
				a6 = aC(a6, a5, a8, a7, a9[a1 + 2], 15, 718787259);
				a7 = aC(a7, a6, a5, a8, a9[a1 + 9], 21, -343485551);
				a8 = aQ(a8, a3);
				a7 = aQ(a7, a2);
				a6 = aQ(a6, a0);
				a5 = aQ(a5, aZ)
			}
			return [a8, a7, a6, a5]
		}
		function aT(a0) {
			var a1, aZ = "";
			for (a1 = 0; a1 < a0.length * 32; a1 += 8) {
				aZ += String.fromCharCode((a0[a1 >> 5] >>> (a1 % 32)) & 255)
			}
			return aZ
		}
		var aV = [
			[2, "h"],
			[5, "t"],
			[8, "g"],
			[11, "c"]
		];

		function aK(a0) {
			var a1, aZ = [];
			aZ[(a0.length >> 2) - 1] = undefined;
			for (a1 = 0; a1 < aZ.length; a1 += 1) {
				aZ[a1] = 0
			}
			for (a1 = 0; a1 < a0.length * 8; a1 += 8) {
				aZ[a1 >> 5] |= (a0.charCodeAt(a1 / 8) & 255) << (a1 % 32)
			}
			return aZ
		}
		function aL(aZ) {
			return aT(aF(aK(aZ), aZ.length * 8))
		}
		function aG(a1, a4) {
			var a0, a3 = aK(a1),
				aZ = [],
				a2 = [],
				a5;
			aZ[15] = a2[15] = undefined;
			if (a3.length > 16) {
				a3 = aF(a3, a1.length * 8)
			}
			for (a0 = 0; a0 < 16; a0 += 1) {
				aZ[a0] = a3[a0] ^ 909522486;
				a2[a0] = a3[a0] ^ 1549556828
			}
			a5 = aF(aZ.concat(aK(a4)), 512 + a4.length * 8);
			return aT(aF(a2.concat(a5), 512 + 128))
		}
		function aY(a1) {
			var a3 = "0123456789abcdef",
				a0 = "",
				aZ, a2;
			for (a2 = 0; a2 < a1.length; a2 += 1) {
				aZ = a1.charCodeAt(a2);
				a0 += a3.charAt((aZ >>> 4) & 15) + a3.charAt(aZ & 15)
			}
			return a0
		}
		function aN(aZ) {
			return unescape(encodeURIComponent(aZ))
		}
		function aU(aZ) {
			return aL(aN(aZ))
		}
		function aM(aZ) {
			return aY(aU(aZ))
		}
		function aI(aZ, a0) {
			return aG(aN(aZ), aN(a0))
		}
		function aW(aZ, a0) {
			return aY(aI(aZ, a0))
		}
		function aO(a0, a1, aZ) {
			if (!a1) {
				if (!aZ) {
					return aM(a0)
				} else {
					return aU(a0)
				}
			}
			if (!aZ) {
				return aW(a1, a0)
			} else {
				return aI(a1, a0)
			}
		}
		var aS = "";
		aR(function() {
			if (_manage) {
				return
			}
			aS = aR("#userPreload").data("src").match(/\/4\/(.+?).png/)[1]
		});
		aR[aH("aKw==")] = function(a0) {
			a0 = aO(a0 + aS).split("");
			for (var aZ = 0; aZ < aV.length; aZ++) {
				a0.splice(aV[aZ][0] + aZ, 0, aV[aZ][1])
			}
			return aO(a0.join(""))
		};
		aR.k.t = function(a1, aZ) {
			function a0(a5) {
				return a5
			}
			var a3 = a1 - aZ,
				a2 = hg.time;
			if (g_config.scoreType && a1 != a2.initTime) {
				var a4 = a2.isDesc ? -1 : 1;
				if ((a2.range[0] > 0 && a4 * a3 < a2.range[0] / 2000) || (a2.range[1] > 0 && a4 * a3 > a2.range[1] / 500)) {
					return a0(!0)
				}
			} else {
				if (a1 != 0 && hg.assets.increment && a3 > hg.assets.increment * 2) {
					return a0(!0)
				}
			}
			return a0(!1)
		};
		aR.setSoundM = function() {
			if (_manage) {
				return
			}
			var a1, a2, a0 = $("#preloadPage"),
				aZ = function(a3) {
					if ($.k.t(a3, aZ.t)) {
						return
					}
					g_config.awardInfoB = $.k(a3), aZ.t = a3, a0.data("g", a3)
				};
			aZ.t = 0, g_config.scoreType ? (a1 = hg.time, a2 = "setTime") : (a1 = hg.grade, a2 = "setGrade"), a1 && a1.on ? (a1.on(a2, aZ), aZ(0)) : aZ("clm123")
		}
	}(jQuery));
	var V = (function() {
		function aE(aF) {
			var aG = this;
			E(aG, ae, []);
			aG.type = "LSprite";
			aG.rotatex;
			aG.rotatey;
			aG.graphics = new l();
			aG.underGraphics = false;
			aG.graphics.parent = aG;
			aG.box2dBody = null;
			aG.shapes = new Array();
			aG.dragRange = null;
			aG.useCursor = null;
			if (aF) {
				ak(aG)
			}
		}
		var aD = {
			setRotate: function(aG) {
				var aF = this;
				if (aF.box2dBody) {
					aF.box2dBody.SetAngle(aG)
				} else {
					aF.rotate = aG
				}
			},
			_rotateReady: function() {
				var aF = this;
				if (aF.box2dBody) {
					if ((typeof aF.rotatex) == W) {
						aF.getRotateXY()
					}
					aF.x = aF.box2dBody.GetPosition().x * ac.box2d.drawScale - aF.parent.x - aF.rotatex;
					aF.y = aF.box2dBody.GetPosition().y * ac.box2d.drawScale - aF.parent.y - aF.rotatey;
					aF.rotate = aF.box2dBody.GetAngle()
				}
			},
			_ll_show: function(aG) {
				var aF = this;
				if (aF.underGraphics) {
					ac.show(aF.childList);
					aF.graphics.ll_show()
				} else {
					aF.graphics.ll_show();
					ac.show(aF.childList)
				}
				aF._ll_debugShape()
			},
			startDrag: function(aG) {
				var aF = this;
				if (aF.ll_dragStart) {
					return
				}
				aF.ll_touchPointID = aG;
				aF.ll_dragGlobalPoint = aF.parent.localToGlobal(new av(aF.x, aF.y));
				aF.ll_dragMX = ad;
				aF.ll_dragMY = aa;
				aF.ll_dragStart = true;
				ac.dragList.push(aF)
			},
			stopDrag: function() {
				var aH = this,
					aG, aF;
				for (aG = 0, aF = ac.dragList.length; aG < aF; aG++) {
					if (aH.objectIndex == ac.dragList[aG].objectIndex) {
						aH.ll_dragStart = false;
						ac.dragList.splice(aG, 1);
						break
					}
				}
			},
			getRotateXY: function(aF, aH) {
				var aG = this;
				if (!aF || !aH) {
					aF = aG.getWidth();
					aH = aG.getHeight()
				}
				aG.rotatex = aF / 2;
				aG.rotatey = aH / 2
			},
			getWidth: function(aJ) {
				var aP = this,
					aI, aH, aF, aL, aK, aN, aO, aG = aP.graphics.startX(),
					aM = aG + aP.graphics.getWidth();
				for (aI = 0, aH = aP.childList.length; aI < aH; aI++) {
					aF = aP.childList[aI];
					if (typeof aF.visible == W || !aF.visible) {
						continue
					}
					aL = aF.x;
					if (typeof aF._startX == "function") {
						aL = aF._startX()
					}
					aK = aL + aF.getWidth(aJ);
					if (aL < aG) {
						aG = aL
					}
					if (aK > aM) {
						aM = aK
					}
				}
				if (aJ && aP.mask) {
					aN = aP.mask._startX ? aP.mask._startX() : aP.mask.startX();
					aO = aP.mask.getWidth();
					if (aG < aN) {
						aG = aN
					}
					if (aM > aN + aO) {
						aM = aN + aO
					}
				}
				aP.ll_left = aP.x + aG;
				aP.ll_right = aP.x + aM;
				return (aM - aG) * aP.scaleX
			},
			getHeight: function(aJ) {
				var aP = this,
					aI, aH, aG, aN, aM, aO, aK, aL = aP.graphics.startY(),
					aF = aL + aP.graphics.getHeight();
				for (aI = 0, aH = aP.childList.length; aI < aH; aI++) {
					aG = aP.childList[aI];
					if (typeof aG.visible == W || !aG.visible) {
						continue
					}
					aN = aG.y;
					if (typeof aG._startY == "function") {
						aN = aG._startY()
					}
					aM = aN + aG.getHeight(aJ);
					if (aN < aL) {
						aL = aN
					}
					if (aM > aF) {
						aF = aM
					}
				}
				if (aJ && aP.mask) {
					aO = aP.mask._startY ? aP.mask._startY() : aP.mask.startY();
					aK = aP.mask.getHeight();
					if (aL < aO) {
						aL = aO
					}
					if (aF > aO + aK) {
						aF = aO + aK
					}
				}
				aP.ll_top = aP.y + aL;
				aP.ll_bottom = aP.y + aF;
				return (aF - aL) * aP.scaleY
			},
			_startX: function() {
				var aF = this;
				aF.getWidth();
				return aF.ll_left
			},
			startX: function() {
				var aF = this;
				return aF._startX() * aF.scaleX
			},
			_startY: function() {
				var aF = this;
				aF.getHeight();
				return aF.ll_top
			},
			startY: function() {
				var aF = this;
				return aF._startY() * aF.scaleY
			},
			_ll_loopframe: function() {
				this.dispatchEvent(y.ENTER_FRAME)
			},
			clone: function() {
				var aI = this,
					aG = new aE(),
					aK, aJ, aH, aF;
				aG.copyProperty(aI);
				aG.graphics = aI.graphics.clone();
				aG.graphics.parent = aG;
				aG.childList.length = 0;
				for (aH = 0, aF = aI.childList.length; aH < aF; aH++) {
					aK = aI.childList[aH];
					if (aK.clone) {
						aJ = aK.clone();
						aJ.parent = aG;
						aG.childList.push(aJ)
					}
				}
				return aG
			},
			_mevent: function(aH) {
				var aG = this,
					aF;
				for (aF = 0; aF < aG.mouseList.length; aF++) {
					var aI = aG.mouseList[aF];
					if (aI.type == aH) {
						return true
					}
				}
				return false
			},
			ll_dispatchMouseEvent: function(aI, aJ, aL, aG, aF) {
				var aH = this;
				if (!aH.mouseEnabled) {
					return
				}
				for (aC = 0; aC < aH.mouseList.length; aC++) {
					var aK = aH.mouseList[aC];
					if (aK.type == aI) {
						aJ.selfX = (aG - (aH.x * aL.scaleX + aL.x)) / (aL.scaleX * aH.scaleX);
						aJ.selfY = (aF - (aH.y * aL.scaleY + aL.y)) / (aL.scaleY * aH.scaleY);
						aJ.currentTarget = aJ.clickTarget = aH;
						if (!aJ.target) {
							aJ.target = aH
						}
						aK.listener(aJ, aH)
					}
				}
			},
			ll_mouseout: function(aK, aJ, aL, aH, aF) {
				var aI = this;
				if (aJ == g.MOUSE_MOVE && aI.ll_mousein) {
					aI.ll_mousein = false;
					if (aI._mevent(g.MOUSE_OUT)) {
						aI.ll_dispatchMouseEvent(g.MOUSE_OUT, aK, aL, aH, aF)
					}
					if (aI.mouseChildren) {
						for (var aG = aI.childList.length - 1; aG >= 0; aG--) {
							if (aI.childList[aG].mouseEvent && aI.childList[aG].ll_mouseout) {
								aI.childList[aG].ll_mouseout(aK, aJ, aL, aH, aF)
							}
						}
					}
				}
			},
			mouseEvent: function(aL, aM, aH) {
				if (!aL) {
					return false
				}
				var aO = this,
					aJ, aI, aG = aL.offsetX,
					aF = aL.offsetY,
					aK, aN;
				if (!aO.visible) {
					return false
				}
				if (aH == null) {
					aH = {
						x: 0,
						y: 0,
						scaleX: 1,
						scaleY: 1
					}
				}
				aK = aO.ismouseon(aL, aH);
				if (aK) {
					if (ac.os == ay && aO.useCursor && aM == g.MOUSE_MOVE) {
						ac.cursor = aO.useCursor
					}
					if (aM == g.MOUSE_MOVE && !aO.ll_mousein) {
						aO.ll_mousein = true;
						if (aO._mevent(g.MOUSE_OVER)) {
							aO.ll_dispatchMouseEvent(g.MOUSE_OVER, aL, aH, aG, aF)
						}
					}
					if (aO.mouseChildren) {
						aN = {
							x: aO.x * aH.scaleX + aH.x,
							y: aO.y * aH.scaleY + aH.y,
							scaleX: aH.scaleX * aO.scaleX,
							scaleY: aH.scaleY * aO.scaleY
						};
						for (aI = aO.childList.length - 1; aI >= 0; aI--) {
							if (aO.childList[aI].mouseEvent) {
								aJ = aO.childList[aI].mouseEvent(aL, aM, aN);
								if (aJ) {
									aL.target = aO.childList[aI];
									if (aM != g.MOUSE_MOVE) {
										break
									}
								}
							}
						}
						if (aO._mevent(aM)) {
							aO.ll_dispatchMouseEvent(aM, aL, aH, aG, aF)
						}
					}
					return true
				} else {
					aO.ll_mouseout(aL, aM, aH, aG, aF)
				}
				return false
			},
			hitTestPoint: function(aF, aI) {
				var aH = this,
					aG = aH.shapes;
				if (!aG || aG.length == 0) {
					aH.getWidth();
					aH.getHeight();
					aG = [{
						type: n.RECT,
						arg: [aH.ll_left - aH.x, aH.ll_top - aH.y, aH.ll_right - aH.ll_left, aH.ll_bottom - aH.ll_top]
					}]
				}
				return aH.ismouseonShapes(aG, aF, aI)
			},
			hitTestObject: function(aK) {
				var aQ = this,
					aF = aQ.shapes,
					aI = aK.shapes,
					aH, aO, aJ, aG, aP, aL, aN, aM;
				if (!aF || aF.length == 0) {
					aQ.getWidth();
					aQ.getHeight();
					aF = [{
						type: n.RECT,
						arg: [aQ.ll_left - aQ.x, aQ.ll_top - aQ.y, aQ.ll_right - aQ.ll_left, aQ.ll_bottom - aQ.ll_top]
					}]
				}
				if (!aI || aI.length == 0) {
					aK.getWidth();
					aK.getHeight();
					aI = [{
						type: n.RECT,
						arg: [aK.ll_left - aK.x, aK.ll_top - aK.y, aK.ll_right - aK.ll_left, aK.ll_bottom - aK.ll_top]
					}]
				}
				aH = aQ.getRootMatrix();
				aO = aK.getRootMatrix();
				for (aJ = aF.length - 1; aJ >= 0; aJ--) {
					aG = aF[aJ];
					aM = aQ._changeShape(aG.type, aG.arg, aH);
					for (aP = aI.length - 1; aP >= 0; aP--) {
						aL = aI[aP];
						aN = aK._changeShape(aL.type, aL.arg, aO);
						if (aG.type == n.VERTICES || aG.type == n.RECT) {
							if (aL.type == n.VERTICES || aL.type == n.RECT) {
								if (ac.hitTestPolygon(aM, aN)) {
									return true
								}
							} else {
								if (aL.type == n.ARC) {
									if (ac.hitTestPolygonArc(aM, aN)) {
										return true
									}
								}
							}
						} else {
							if (aL.type == n.VERTICES || aL.type == n.RECT) {
								if (ac.hitTestPolygonArc(aN, aM)) {
									return true
								}
							} else {
								if (aL.type == n.ARC) {
									if (Math.sqrt((aM[0] - aN[0]) * (aM[0] - aN[0]) + (aM[1] - aN[1]) * (aM[1] - aN[1])) < aM[2] + aN[2]) {
										return true
									}
								}
							}
						}
					}
				}
				return false
			},
			addShape: function(aH, aF) {
				var aG = this;
				if (aH == n.VERTICES && aF.length < 3) {
					return
				}
				aG.shapes.push({
					type: aH,
					arg: aF
				});
				return aG.shapes
			},
			addShapes: function(aF) {
				var aG = this;
				if (aG.shapes.length == 0) {
					aG.shapes = aF
				} else {
					aG.shapes = aG.shapes.concat(aF)
				}
			},
			clearShape: function() {
				this.shapes = []
			},
			_ll_debugShape: function() {
				var aJ = this,
					aI, aG, aM, aL, aF, aH, aK;
				if (!ac.traceDebug || aJ.shapes.length == 0) {
					return
				}
				for (aI = 0, aG = aJ.shapes.length; aI < aG; aI++) {
					aM = aJ.shapes[aI];
					aL = ac.canvas;
					aF = aM.arg;
					aL.beginPath();
					if (aM.type == n.RECT) {
						aL.rect(aF[0], aF[1], aF[2], aF[3])
					} else {
						if (aM.type == n.ARC) {
							aL.arc(aF[0], aF[1], aF[2], 0, 2 * Math.PI)
						} else {
							if (aM.type == n.VERTICES) {
								aL.moveTo(aF[0][0], aF[0][1]);
								for (aH = 1, aK = aF.length; aH < aK; aH++) {
									aL.lineTo(aF[aH][0], aF[aH][1])
								}
								aL.lineTo(aF[0][0], aF[0][1])
							}
						}
					}
					aL.closePath();
					aL.strokeStyle = "#00FF00";
					aL.stroke()
				}
			},
			ismouseon: function(aJ, aL) {
				var aI = this;
				if (!aI.visible || aJ == null) {
					return false
				}
				if (aI.mask) {
					if (!aI.mask.parent) {
						aI.mask.parent = aI.parent
					}
					if (!aI.mask.ismouseon(aJ, aL)) {
						return false
					}
				}
				if (aI.shapes && aI.shapes.length > 0) {
					return aI.ismouseonShapes(aI.shapes, aJ.offsetX, aJ.offsetY)
				}
				var aG, aH = false,
					aF = aI.childList,
					aK = {
						x: aI.x * aL.scaleX + aL.x,
						y: aI.y * aL.scaleY + aL.y,
						scaleX: aL.scaleX * aI.scaleX,
						scaleY: aL.scaleY * aI.scaleY
					};
				for (aG = aF.length - 1; aG >= 0; aG--) {
					if (aF[aG].ismouseon) {
						aH = aF[aG].ismouseon(aJ, aK)
					}
					if (aH) {
						aJ.target = aI.childList[aG];
						break
					}
				}
				if (!aH) {
					aH = aI.graphics.ismouseon(aJ, aK)
				}
				return aH
			},
			die: function() {
				var aH = this,
					aG, aI, aF;
				aH.graphics.clear();
				aH.removeAllEventListener();
				aH.stopDrag();
				if (aH.box2dBody) {
					aH.clearBody()
				}
				for (aG = 0, aI = aH.childList, aF = aI.length; aG < aF; aG++) {
					if (aI[aG].die) {
						aI[aG].die()
					}
				}
			}
		};
		for (var aC in aD) {
			aE.prototype[aC] = aD[aC]
		}
		return aE
	})();
	var q = (function() {
		function aC(aK, aF, aJ, aG, aI) {
			var aH = this;
			E(aH, P, []);
			aH.type = "LBitmap";
			aH.rotateCenter = true;
			if (aK.type && aK.type === "LBitmapData") {
				aH.bitmapData = aK
			} else {
				aH.bitmapData = new s(aK)
			}
			aH.width = aG || aH.bitmapData.width;
			aH.height = aI || aH.bitmapData.height;
			aH.x = aF || 0;
			aH.y = aJ || 0;
			aH.rotatex = aH.getWidth() * 0.5;
			aH.rotatey = aH.getHeight() * 0.5
		}
		var aE = {
			_canShow: function() {
				return (this.visible && this.bitmapData)
			},
			_rotateReady: function() {
				var aF = this;
				if (aF.rotate != 0 && aF.rotateCenter) {
					aF.rotatex = aF.getWidth() * 0.5;
					aF.rotatey = aF.getHeight() * 0.5
				} else {
					if (typeof aF.rotatex == W) {
						aF.rotatex = aF.rotatey = 0
					}
				}
			},
			_coordinate: function(aF) {},
			_ll_show: function() {
				this.ll_draw()
			},
			ll_draw: function() {
				var aF = this;
				if (ac.fpsStatus) {
					ac.fpsStatus.bitmapData++
				}
				ac.canvas.drawImage(aF.bitmapData.image, aF.bitmapData.x, aF.bitmapData.y, aF.bitmapData.width, aF.bitmapData.height, aF.x, aF.y, aF.width, aF.height)
			},
			clone: function() {
				var aG = this,
					aF = new aC(aG.bitmapData.clone(), aG.x, aG.y, aG.width, aG.height);
				aF.copyProperty(aG);
				aF.rotateCenter = aG.rotateCenter;
				return aF
			},
			ismouseon: function(aH, aG) {
				var aF = this;
				if (!aH) {
					return false
				}
				if (!aF.visible || !aF.bitmapData) {
					return false
				}
				if (aF.mask) {
					if (!aF.mask.parent) {
						aF.mask.parent = aF.parent
					}
					if (!aF.mask.ismouseon(aH, aG)) {
						return false
					}
				}
				return aF.ismouseonShapes([{
					type: n.RECT,
					arg: [0, 0, aF.width, aF.height]
				}], aH.offsetX, aH.offsetY)
			},
			getWidth: function(aH) {
				var aG = this,
					aF, aI, aJ;
				aF = aG.width || (aG.bitmapData != null ? aG.bitmapData.width * (aG.scaleX > 0 ? aG.scaleX : -aG.scaleX) : 0);
				if (aH && aG.mask) {
					aI = aG.mask._startX ? aG.mask._startX() : aG.mask.startX();
					if (aI > aF) {
						return 0
					}
					aJ = aG.mask.getWidth();
					if (aI + aJ > aF) {
						return aF - aI
					} else {
						return aJ
					}
				}
				aG.ll_left = aG.x;
				aG.ll_right = aG.x + aF;
				return aF
			},
			getHeight: function(aI) {
				var aH = this,
					aG, aJ, aF;
				aG = aH.height || (aH.bitmapData != null ? aH.bitmapData.height * (aH.scaleY > 0 ? aH.scaleY : -aH.scaleY) : 0);
				if (aI && aH.mask) {
					aJ = aH.mask._startY ? aH.mask._startY() : aH.mask.startY();
					if (aJ > aG) {
						return 0
					}
					aF = aH.mask.getHeight();
					if (aJ + aF > aG) {
						return aG - aJ
					} else {
						return aF
					}
				}
				aH.ll_top = aH.y;
				aH.ll_bottom = aH.y + aG;
				return aG
			},
			startX: function() {
				return this.x
			},
			startY: function() {
				return this.y
			},
			die: function() {}
		};
		for (var aD in aE) {
			aC.prototype[aD] = aE[aD]
		}
		return aC
	})();
	var s = (function() {
		function aD(aG, aL, aJ, aF, aM, aK) {
			var aN = this;
			E(aN, r, []);
			aN.type = "LBitmapData";
			if (typeof aK == W) {
				aK = aD.DATA_IMAGE
			}
			aN.oncomplete = null;
			aN._locked = false;
			aN._setPixel = false;
			aN.x = (aL == null ? 0 : aL);
			aN.y = (aJ == null ? 0 : aJ);
			aN.width = 0;
			aN.height = 0;
			aN.dataType = null;
			if (aG && typeof aG == "object") {
				aN.image = aG;
				aN.dataType = aD.DATA_IMAGE;
				aN.width = (aF == null ? aN.image.width : aF);
				aN.height = (aM == null ? aN.image.height : aM);
				aN._setDataType(aK)
			} else {
				aN._createCanvas();
				aN.dataType = aD.DATA_CANVAS;
				aN._canvas.width = aN.width = (aF == null ? 1 : aF);
				aN._canvas.height = aN.height = (aM == null ? 1 : aM);
				if (typeof aG == "string") {
					aG = parseInt(aG.replace("#", "0x"))
				}
				if (typeof aG == "number") {
					var aI = aN._context.createImageData(aN.width, aN.height);
					for (var aH = 0; aH < aI.data.length; aH += 4) {
						aI.data[aH + 0] = aG >> 16 & 255;
						aI.data[aH + 1] = aG >> 8 & 255;
						aI.data[aH + 2] = aG & 255;
						aI.data[aH + 3] = 255
					}
					aN._context.putImageData(aI, 0, 0)
				}
				aN.image = aN._canvas;
				if (aK == aD.DATA_IMAGE) {
					aN._setDataType(aK)
				}
			}
			aN.resize()
		}
		aD.DATA_IMAGE = "data_image";
		aD.DATA_CANVAS = "data_canvas";
		var aE = {
			_setDataType: function(aF) {
				var aG = this;
				if (aG.dataType == aF) {
					return
				}
				if (aF == aD.DATA_CANVAS) {
					aG._createCanvas();
					aG._canvas.width = aG.image.width;
					aG._canvas.height = aG.image.height;
					aG._context.clearRect(0, 0, aG._canvas.width, aG._canvas.height);
					aG._context.drawImage(aG.image, 0, 0);
					aG.image = aG._canvas
				} else {
					if (aF == aD.DATA_IMAGE) {
						aG.image = new Image();
						aG.image.width = aG._canvas.width;
						aG.image.height = aG._canvas.height;
						aG.image.src = aG._canvas.toDataURL()
					}
				}
				aG.dataType = aF
			},
			_createCanvas: function() {
				var aF = this;
				if (!aF._canvas) {
					aF._canvas = document.createElement("canvas");
					aF._context = aF._canvas.getContext("2d")
				}
			},
			clear: function() {
				var aF = this;
				aF._createCanvas();
				aF._canvas.width = aF.image.width;
				if (aF.dataType == aD.DATA_IMAGE) {
					aF.image.src = aF._canvas.toDataURL()
				}
			},
			setProperties: function(aG, aJ, aI, aF) {
				var aH = this;
				aH.x = aG;
				aH.y = aJ;
				aH.width = aI;
				aH.height = aF;
				aH.resize()
			},
			setCoordinate: function(aF, aH) {
				var aG = this;
				aG.x = aF;
				aG.y = aH;
				aG.resize()
			},
			clone: function() {
				var aF = this;
				return new aD(aF.image, aF.x, aF.y, aF.width, aF.height, aF.dataType)
			},
			_ready: function() {
				var aF = this;
				aF._dataType = aF.dataType;
				aF._setDataType(aD.DATA_CANVAS);
				aF._data = aF._context.getImageData(aF.x, aF.y, aF.width, aF.height)
			},
			_update: function() {
				var aF = this;
				aF._context.putImageData(aF._data, aF.x, aF.y, 0, 0, aF.width, aF.height);
				aF._setDataType(aF._dataType);
				aF._data = null
			},
			applyFilter: function(aL, aI, aF, aH) {
				var aG = this;
				var aJ = aG._context.getImageData(aG.x + aI.x, aG.y + aI.y, aI.width, aI.height);
				var aK = aH.filter(aJ, aI.width);
				aG.putPixels(new N(aF.x, aF.y, aI.width, aI.height), aK)
			},
			getPixel: function(aF, aK, aG) {
				var aI = this,
					aH, aJ;
				aF = aF >> 0;
				aK = aK >> 0;
				if (!aI._locked) {
					aI._ready()
				}
				aH = aI.width * 4 * aK + aF * 4;
				aJ = aI._data.data;
				if (!aI._locked) {
					aI._update()
				}
				if (aG == "number") {
					return aJ[aH] << 16 | aJ[aH + 1] << 8 | aJ[aH + 2]
				} else {
					return [aJ[aH], aJ[aH + 1], aJ[aH + 2], aJ[aH + 3]]
				}
			},
			setPixel: function(aF, aK, aI) {
				var aH = this;
				aF = aF >> 0;
				aK = aK >> 0;
				if (!aH._locked) {
					aH._ready()
				}
				var aJ = aH._data,
					aG = aH.width * 4 * aK + aF * 4;
				if (typeof aI == "object") {
					aJ.data[aG + 0] = aI[0];
					aJ.data[aG + 1] = aI[1];
					aJ.data[aG + 2] = aI[2];
					aJ.data[aG + 3] = aI[3]
				} else {
					if (typeof aI == "string") {
						aI = parseInt(aI.replace("#", "0x"))
					}
					aJ.data[aG + 0] = aI >> 16 & 255;
					aJ.data[aG + 1] = aI >> 8 & 255;
					aJ.data[aG + 2] = aI & 255;
					aJ.data[aG + 3] = 255
				}
				if (!aH._locked) {
					aH._update()
				}
			},
			getPixels: function(aH) {
				var aF = this,
					aG;
				if (!aF._locked) {
					aF._ready()
				}
				aG = aF._context.getImageData(aF.x + aH.x, aF.y + aH.y, aH.width, aH.height);
				if (!aF._locked) {
					aF._update()
				}
				return aG
			},
			setPixels: function(aL, aG) {
				var aO = this,
					aH, aF, aI, aN, aJ, aM, aK;
				if (!aO._locked) {
					aO._ready()
				}
				aI = aO._data;
				if (typeof aG == "object") {
					aN = aO._canvas.width;
					for (aM = aL.x; aM < aL.right; aM++) {
						for (aK = aL.y; aK < aL.bottom; aK++) {
							aH = aN * 4 * (aO.y + aK) + (aO.x + aM) * 4;
							aF = aG.width * 4 * (aK - aL.y) + (aM - aL.x) * 4;
							aI.data[aH + 0] = aG.data[aF + 0];
							aI.data[aH + 1] = aG.data[aF + 1];
							aI.data[aH + 2] = aG.data[aF + 2];
							aI.data[aH + 3] = aG.data[aF + 3]
						}
					}
				} else {
					if (typeof aG == "string") {
						aG = parseInt(aG.replace("#", "0x"))
					}
					aG = [aG >> 16 & 255, aG >> 8 & 255, aG & 255];
					aN = aO._canvas.width;
					for (aM = aL.x; aM < aL.right; aM++) {
						for (aK = aL.y; aK < aL.bottom; aK++) {
							aH = aN * 4 * (aO.y + aK) + (aO.x + aM) * 4;
							aI.data[aH + 0] = aG[0];
							aI.data[aH + 1] = aG[1];
							aI.data[aH + 2] = aG[2];
							aI.data[aH + 3] = 255
						}
					}
				}
				if (!aO._locked) {
					aO._update()
				}
			},
			putPixels: function(aG, aH) {
				var aF = this;
				if (aF.dataType != aD.DATA_CANVAS || typeof aH != "object") {
					return
				}
				aF._context.putImageData(aH, aF.x + aG.x, aF.y + aG.y, 0, 0, aG.width, aG.height)
			},
			lock: function() {
				var aF = this;
				aF._locked = true;
				aF._ready()
			},
			unlock: function() {
				var aF = this;
				aF._locked = false;
				aF._update()
			},
			draw: function(aF, aP, aG, aN, aH) {
				var aS = this,
					aL, aJ = aF,
					aO, aM, aQ, aI, aK = false;
				var aR = aS.dataType;
				aS._setDataType(aD.DATA_CANVAS);
				if (aP || aG || aN || aH) {
					aS._context.save();
					aK = true
				}
				if (aH) {
					if (!(aJ instanceof aD)) {
						aO = aM = 0
					} else {
						aO = aJ.x;
						aM = aJ.y
					}
					aJ = new aD(aJ.getDataCanvas(), aO + aH.x, aM + aH.y, aH.width, aH.height, aD.DATA_CANVAS)
				}
				aQ = aJ.getWidth() >>> 0;
				aI = aJ.getHeight() >>> 0;
				if (aQ == 0 || aI == 0) {
					aS._setDataType(aR);
					return
				}
				aL = aJ.getDataCanvas();
				if (aG) {
					aJ.colorTransform(new N(0, 0, aQ, aI), aG);
					aL = aJ.image
				}
				if (aP) {
					aS._context.setTransform(aP.a, aP.b, aP.c, aP.d, aP.tx, aP.ty)
				}
				if (aN) {
					aS._context.globalCompositeOperation = aN
				}
				aS._context.drawImage(aL, aJ.x, aJ.y, aQ, aI, 0, 0, aQ, aI);
				if (aK) {
					aS._context.restore()
				}
				aS._setDataType(aR);
				aS.resize()
			},
			getDataCanvas: function() {
				var aG = this;
				var aF = aG.dataType;
				aG._setDataType(aD.DATA_CANVAS);
				aG._setDataType(aF);
				return aG._canvas
			},
			getWidth: function() {
				return this.width
			},
			getHeight: function() {
				return this.height
			},
			resize: function() {
				var aH = this,
					aF = aH.image.width - aH.x,
					aG = aH.image.height - aH.y;
				aH.width = aH.width < aF ? aH.width : aF;
				aH.height = aH.height < aG ? aH.height : aG
			},
			colorTransform: function(aP, aH) {
				var aT = this;
				if (aT.dataType != aD.DATA_CANVAS) {
					return
				}
				var aR = aP.x >> 0,
					aO = aP.y >> 0,
					aS = aP.width >> 0,
					aL = aP.height >> 0;
				var aK = aT._context.getImageData(aT.x + aP.x, aT.y + aP.y, aP.width, aP.height);
				var aJ = aK.data;
				for (var aI = 0, aG = aJ.length; aI < aG; aI += 4) {
					var aF = aI,
						aM = aI + 1,
						aN = aI + 2,
						aQ = aI + 3;
					aJ[aF] = aJ[aF] * aH.redMultiplier + aH.redOffset;
					aJ[aM] = aJ[aM] * aH.greenMultiplier + aH.greenOffset;
					aJ[aN] = aJ[aN] * aH.blueMultiplier + aH.blueOffset;
					aJ[aQ] = aJ[aQ] * aH.alphaMultiplier + aH.alphaOffset
				}
				aT._context.putImageData(aK, aT.x + aP.x, aT.y + aP.y, 0, 0, aP.width, aP.height)
			},
			copyPixels: function(aH, aL, aJ) {
				var aN = this,
					aG, aK, aF, aM, aI = aH;
				if (aN.dataType != aD.DATA_CANVAS) {
					return
				}
				aG = aI.x;
				aK = aI.y;
				aF = aI.width;
				aM = aI.height;
				aI.setProperties(aL.x + aI.x, aL.y + aI.y, aL.width, aL.height);
				aN._context.drawImage(aI.image, aI.x, aI.y, aI.width, aI.height, aJ.x, aJ.y, aI.width, aI.height);
				aI.x = aG;
				aI.y = aK;
				aI.width = aF;
				aI.height = aM
			}
		};
		for (var aC in aE) {
			aD.prototype[aC] = aE[aC]
		}
		return aD
	})();
	var ah = (function() {
		function aC() {
			var aD = this;
			E(aD, r, []);
			aD.type = "LBitmapFilter"
		}
		aC.prototype.ll_show = function(aG) {
			var aD = this;
			if (aD.cacheMaking) {
				return
			}
			var aH = ac.canvas,
				aF = aG,
				aE;
			if (aF.constructor.name == "LBitmap") {
				aE = aF.bitmapData
			} else {
				if (!aF._ll_cacheAsBitmap) {
					aD.cacheMaking = true;
					aF.cacheAsBitmap(true);
					aD.cacheMaking = false
				}
				aE = aF._ll_cacheAsBitmap.bitmapData
			}
			if (aD.bitmapDataIndex === aE.objectIndex) {
				return
			}
			aD.bitmapDataIndex = aE.objectIndex;
			aE.applyFilter(aE, new N(0, 0, aE.width, aE.height), new av(0, 0), aD)
		};
		return aC
	})();
	var ag = (function() {
		function aE(aJ, aI, aF, aH) {
			var aG = this;
			E(aG, ah, []);
			aG.type = "LDropShadowFilter";
			aG.distance = aJ ? aJ : 0;
			aG.angle = aI ? aI : 0;
			aG.shadowColor = aF ? aF : "#000000";
			aG.shadowBlur = aH ? aH : 20;
			aG.setShadowOffset()
		}
		var aD = {
			setShadowOffset: function() {
				var aG = this;
				var aF = aG.angle * Math.PI / 180;
				aG.shadowOffsetX = aG.distance * Math.cos(aF);
				aG.shadowOffsetY = aG.distance * Math.sin(aF)
			},
			ll_show: function() {
				var aF = this,
					aG = ac.canvas;
				aG.shadowColor = aF.shadowColor;
				aG.shadowBlur = aF.shadowBlur;
				aG.shadowOffsetX = aF.shadowOffsetX;
				aG.shadowOffsetY = aF.shadowOffsetY
			},
			setDistance: function(aF) {
				this.distance = aF;
				this.setShadowOffset()
			},
			setAngle: function(aF) {
				this.angle = aF;
				this.setShadowOffset()
			},
			setColor: function(aF) {
				this.shadowColor = aF
			},
			setBlur: function(aF) {
				this.shadowBlur = aF
			}
		};
		for (var aC in aD) {
			aE.prototype[aC] = aD[aC]
		}
		return aE
	})();
	var ai = (function() {
		function aE(aF) {
			var aG = this;
			E(aG, ah, []);
			aG.type = "LColorMatrixFilter";
			aG.matrix = aF
		}
		var aD = {
			filter: function(aF, aN) {
				var aO = this,
					aJ = ac.canvas;
				var aK = aF.data;
				var aI = aJ.createImageData(aF);
				var aM = aI.data;
				var aH = aM.length;
				var aL = aO.matrix;
				for (var aG = 0; aG < aH; aG += 4) {
					aM[aG] = (aL[0] * aK[aG]) + (aL[1] * aK[aG + 1]) + (aL[2] * aK[aG + 2]) + (aL[3] * aK[aG + 3]) + aL[4];
					aM[aG + 1] = (aL[5] * aK[aG]) + (aL[6] * aK[aG + 1]) + (aL[7] * aK[aG + 2]) + (aL[8] * aK[aG + 3]) + aL[9];
					aM[aG + 2] = (aL[10] * aK[aG]) + (aL[11] * aK[aG + 1]) + (aL[12] * aK[aG + 2]) + (aL[13] * aK[aG + 3]) + aL[14];
					aM[aG + 3] = (aL[15] * aK[aG]) + (aL[16] * aK[aG + 1]) + (aL[17] * aK[aG + 2]) + (aL[18] * aK[aG + 3]) + aL[19]
				}
				return aI
			}
		};
		for (var aC in aD) {
			aE.prototype[aC] = aD[aC]
		}
		return aE
	})();
	var b = (function() {
		function aD(aJ, aG, aN, aF, aL, aM, aK, aI, aH) {
			var aO = this;
			E(aO, ah, []);
			aO.type = "LConvolutionFilter";
			aO.matrixX = aJ ? aJ : 0;
			aO.matrixY = aG ? aG : 0;
			aO.matrix = aN;
			if (!aF) {
				aF = aN.reduce(function(aQ, aP) {
					return aQ + aP
				}) || 1
			}
			aO.divisor = aF;
			aO.bias = aL ? aL : 0
		}
		var aE = {
			filter: function(aF, aO) {
				var aP = this,
					aL = ac.canvas;
				var aM = aF.data;
				var aK = aL.createImageData(aF);
				var aN = aK.data;
				var aJ = aN.length;
				for (var aI = 0; aI < aJ; aI++) {
					if ((aI + 1) % 4 === 0) {
						aN[aI] = aM[aI];
						continue
					}
					res = 0;
					var aG = [aM[aI - aO * 4 - 4] || aM[aI], aM[aI - aO * 4] || aM[aI], aM[aI - aO * 4 + 4] || aM[aI], aM[aI - 4] || aM[aI], aM[aI], aM[aI + 4] || aM[aI], aM[aI + aO * 4 - 4] || aM[aI], aM[aI + aO * 4] || aM[aI], aM[aI + aO * 4 + 4] || aM[aI]];
					for (var aH = 0; aH < 9; aH++) {
						res += aG[aH] * aP.matrix[aH]
					}
					res /= aP.divisor;
					if (aP.bias) {
						res += aP.bias
					}
					aN[aI] = res
				}
				return aK
			}
		};
		for (var aC in aE) {
			aD.prototype[aC] = aE[aC]
		}
		return aD
	})();
	var k = (function() {
		function aD(aG, aK, aF, aI, aM, aL, aN, aH, aJ) {
			var aO = this;
			E(aO, V, []);
			aO.type = "LAnimation";
			aO.index = 0;
			aO.frameInc = 0;
			aO.loop = aI || "loop";
			aO.count = aJ || 0;
			aO.fps = aF || 60 / 1000;
			if (Array.isArray(aG)) {
				aO.bitmapList = aG
			} else {
				aO.bitmapList = [aG]
			}
			aO.bitmap = new q(aO.bitmapList[0], aM, aL, aN, aH);
			aO.imageArray = aK;
			aO.addChild(aO.bitmap);
			aO.index = 0;
			aO.addEventListener(y.ENTER_FRAME, aO.onframe.bind(aO))
		}
		var aE = {
			change: function(aG, aK, aF, aI, aM, aL, aN, aH, aJ) {
				var aO = this;
				if (aG) {
					if (Array.isArray(aG)) {
						aO.bitmapList = aG
					} else {
						aO.bitmapList = [aG]
					}
					aO.bitmap.bitmapData = aO.bitmapList[0]
				}
				aM && (aO.bitmap.x = aM);
				aL && (aO.bitmap.y = aL);
				aN && (aO.bitmap.width = aN);
				aH && (aO.bitmap.height = aH);
				aK && (aO.imageArray = aK);
				aF && (aO.fps = aF);
				aI && (aO.loop = aI);
				aO.index = 0;
				aO.frameInc = 0;
				aO.count = aJ || 0
			},
			onframe: function() {
				var aH = this,
					aF, aK = 0,
					aI = aH.imageArray || aH.bitmapList;
				if (aH._ll_stop) {
					return
				}
				if (aH.loop === "none") {
					return
				}
				if (aH.bitmapList.length === 1 && (!aI || !Array.isArray(aI) || aI.length <= 1)) {
					return
				}
				if (aH.index >= aI.length) {
					aH.index = 0
				}
				aH.frameInc += aH.fps * ac.delta;
				var aG = Math.floor(aH.frameInc);
				var aJ = aH.index;
				aH.index = aG % aI.length;
				if (aH.bitmapList.length > 1 && aH.index < aH.bitmapList.length) {
					aH.bitmap.bitmapData = aH.bitmapList[aH.index]
				}
				if (aH.imageArray && Array.isArray(aH.imageArray)) {
					aF = aI[aH.index];
					if (typeof aF.dataIndex == "number" && Array.isArray(aH.bitmapList) && aF.dataIndex < aH.bitmapList.length) {
						aH.bitmap.bitmapData = aH.bitmapList[aF.dataIndex]
					}
					if (typeof aF.width != W && typeof aF.height != W) {
						aH.bitmap.bitmapData.setProperties(aF.x, aF.y, aF.width, aF.height)
					} else {
						aH.bitmap.bitmapData.setCoordinate(aF.x, aF.y)
					}
					if (typeof aF.sx != W) {
						aK = aF.sx
					}
					if (typeof aF.sy != W) {
						aH.bitmap.y = aF.sy
					}
					if (typeof aF.mirror != W) {
						aH.bitmap.rotateCenter = false;
						aH.bitmap.scaleX = aF.mirror ? -1 : 1
					}
					aH.bitmap.x = aK + (aH.bitmap.scaleX == 1 ? 0 : aH.bitmap.getWidth())
				}
				if (aJ !== aH.index && aH.index === aI.length - 1) {
					aH.dispatchEvent(y.COMPLETE);
					if (typeof aH.count == "number") {
						aH.count++
					}
					if (typeof aH.loop === "number") {
						aH.loop--;
						if (aH.loop <= 0) {
							aH.remove();
							aH.die()
						}
					}
				}
			},
			play: function() {
				this._ll_stop = false
			},
			stop: function() {
				this._ll_stop = true
			},
			clone: function() {
				var aG = this,
					aF = new aG.constructor(null, aG.bitmapList, aG.imageArray.slice(0));
				aF.copyProperty(aG);
				aF.childList.length = 0;
				aF.bitmap = aG.bitmap.clone();
				aF.addChild(aF.bitmap);
				return aF
			}
		};
		for (var aC in aE) {
			aD.prototype[aC] = aE[aC]
		}
		return aD
	})();
	var t = {
		None: {
			easeIn: function(aD, aC, aF, aE) {
				return aC + aD * aF / aE
			},
			easeOut: function(aD, aC, aF, aE) {
				return aC + aD * aF / aE
			},
			easeInOut: function(aD, aC, aF, aE) {
				return aC + aD * aF / aE
			}
		},
		Quad: {
			easeIn: function(aD, aC, aF, aE) {
				return aF * (aD /= aE) * aD + aC
			},
			easeOut: function(aD, aC, aF, aE) {
				return -aF * (aD /= aE) * (aD - 2) + aC
			},
			easeInOut: function(aD, aC, aF, aE) {
				if ((aD /= aE / 2) < 1) {
					return aF / 2 * aD * aD + aC
				}
				return -aF / 2 * ((--aD) * (aD - 2) - 1) + aC
			}
		},
		Cubic: {
			easeIn: function(aD, aC, aF, aE) {
				return aF * (aD /= aE) * aD * aD + aC
			},
			easeOut: function(aD, aC, aF, aE) {
				return aF * ((aD = aD / aE - 1) * aD * aD + 1) + aC
			},
			easeInOut: function(aD, aC, aF, aE) {
				if ((aD /= aE / 2) < 1) {
					return aF / 2 * aD * aD * aD + aC
				}
				return aF / 2 * ((aD -= 2) * aD * aD + 2) + aC
			}
		},
		Quart: {
			easeIn: function(aD, aC, aF, aE) {
				return aF * (aD /= aE) * aD * aD * aD + aC
			},
			easeOut: function(aD, aC, aF, aE) {
				return -aF * ((aD = aD / aE - 1) * aD * aD * aD - 1) + aC
			},
			easeInOut: function(aD, aC, aF, aE) {
				if ((aD /= aE / 2) < 1) {
					return aF / 2 * aD * aD * aD * aD + aC
				}
				return -aF / 2 * ((aD -= 2) * aD * aD * aD - 2) + aC
			}
		},
		Quint: {
			easeIn: function(aD, aC, aF, aE) {
				return aF * (aD /= aE) * aD * aD * aD * aD + aC
			},
			easeOut: function(aD, aC, aF, aE) {
				return aF * ((aD = aD / aE - 1) * aD * aD * aD * aD + 1) + aC
			},
			easeInOut: function(aD, aC, aF, aE) {
				if ((aD /= aE / 2) < 1) {
					return aF / 2 * aD * aD * aD * aD * aD + aC
				}
				return aF / 2 * ((aD -= 2) * aD * aD * aD * aD + 2) + aC
			}
		},
		Sine: {
			easeIn: function(aD, aC, aF, aE) {
				return -aF * Math.cos(aD / aE * (Math.PI / 2)) + aF + aC
			},
			easeOut: function(aD, aC, aF, aE) {
				return aF * Math.sin(aD / aE * (Math.PI / 2)) + aC
			},
			easeInOut: function(aD, aC, aF, aE) {
				return -aF / 2 * (Math.cos(Math.PI * aD / aE) - 1) + aC
			}
		},
		Strong: {
			easeIn: function(aD, aC, aF, aE) {
				return aF * (aD /= aE) * aD * aD * aD * aD + aC
			},
			easeOut: function(aD, aC, aF, aE) {
				return aF * ((aD = aD / aE - 1) * aD * aD * aD * aD + 1) + aC
			},
			easeInOut: function(aD, aC, aF, aE) {
				if ((aD /= aE / 2) < 1) {
					return aF / 2 * aD * aD * aD * aD * aD + aC
				}
				return aF / 2 * ((aD -= 2) * aD * aD * aD * aD + 2) + aC
			}
		},
		Expo: {
			easeIn: function(aD, aC, aF, aE) {
				return (aD == 0) ? aC : aF * Math.pow(2, 10 * (aD / aE - 1)) + aC
			},
			easeOut: function(aD, aC, aF, aE) {
				return (aD == aE) ? aC + aF : aF * (-Math.pow(2, -10 * aD / aE) + 1) + aC
			},
			easeInOut: function(aD, aC, aF, aE) {
				if (aD == 0) {
					return aC
				}
				if (aD == aE) {
					return aC + aF
				}
				if ((aD /= aE / 2) < 1) {
					return aF / 2 * Math.pow(2, 10 * (aD - 1)) + aC
				}
				return aF / 2 * (-Math.pow(2, -10 * --aD) + 2) + aC
			}
		},
		Circ: {
			easeIn: function(aD, aC, aF, aE) {
				return -aF * (Math.sqrt(1 - (aD /= aE) * aD) - 1) + aC
			},
			easeOut: function(aD, aC, aF, aE) {
				return aF * Math.sqrt(1 - (aD = aD / aE - 1) * aD) + aC
			},
			easeInOut: function(aD, aC, aF, aE) {
				if ((aD /= aE / 2) < 1) {
					return -aF / 2 * (Math.sqrt(1 - aD * aD) - 1) + aC
				}
				return aF / 2 * (Math.sqrt(1 - (aD -= 2) * aD) + 1) + aC
			}
		},
		Elastic: {
			easeIn: function(aE, aC, aI, aH, aD, aG) {
				var aF;
				if (aE == 0) {
					return aC
				}
				if ((aE /= aH) == 1) {
					return aC + aI
				}
				if (!aG) {
					aG = aH * 0.3
				}
				if (!aD || aD < Math.abs(aI)) {
					aD = aI;
					aF = aG / 4
				} else {
					aF = aG / (2 * Math.PI) * Math.asin(aI / aD)
				}
				return -(aD * Math.pow(2, 10 * (aE -= 1)) * Math.sin((aE * aH - aF) * (2 * Math.PI) / aG)) + aC
			},
			easeOut: function(aE, aC, aI, aH, aD, aG) {
				var aF;
				if (aE == 0) {
					return aC
				}
				if ((aE /= aH) == 1) {
					return aC + aI
				}
				if (!aG) {
					aG = aH * 0.3
				}
				if (!aD || aD < Math.abs(aI)) {
					aD = aI;
					aF = aG / 4
				} else {
					aF = aG / (2 * Math.PI) * Math.asin(aI / aD)
				}
				return (aD * Math.pow(2, -10 * aE) * Math.sin((aE * aH - aF) * (2 * Math.PI) / aG) + aI + aC)
			},
			easeInOut: function(aE, aC, aI, aH, aD, aG) {
				var aF;
				if (aE == 0) {
					return aC
				}
				if ((aE /= aH / 2) == 2) {
					return aC + aI
				}
				if (!aG) {
					aG = aH * (0.3 * 1.5)
				}
				if (!aD || aD < Math.abs(aI)) {
					aD = aI;
					aF = aG / 4
				} else {
					aF = aG / (2 * Math.PI) * Math.asin(aI / aD)
				}
				if (aE < 1) {
					return -0.5 * (aD * Math.pow(2, 10 * (aE -= 1)) * Math.sin((aE * aH - aF) * (2 * Math.PI) / aG)) + aC
				}
				return aD * Math.pow(2, -10 * (aE -= 1)) * Math.sin((aE * aH - aF) * (2 * Math.PI) / aG) * 0.5 + aI + aC
			}
		},
		Back: {
			easeIn: function(aD, aC, aG, aF, aE) {
				if (typeof aE == W) {
					aE = 1.70158
				}
				return aG * (aD /= aF) * aD * ((aE + 1) * aD - aE) + aC
			},
			easeOut: function(aD, aC, aG, aF, aE) {
				if (typeof aE == W) {
					aE = 1.70158
				}
				return aG * ((aD = aD / aF - 1) * aD * ((aE + 1) * aD + aE) + 1) + aC
			},
			easeInOut: function(aD, aC, aG, aF, aE) {
				if (typeof aE == W) {
					aE = 1.70158
				}
				if ((aD /= aF / 2) < 1) {
					return aG / 2 * (aD * aD * (((aE *= (1.525)) + 1) * aD - aE)) + aC
				}
				return aG / 2 * ((aD -= 2) * aD * (((aE *= (1.525)) + 1) * aD + aE) + 2) + aC
			}
		},
		Bounce: {
			easeIn: function(aD, aC, aF, aE) {
				return aF - t.Bounce.easeOut(aE - aD, 0, aF, aE) + aC
			},
			easeOut: function(aD, aC, aF, aE) {
				if ((aD /= aE) < (1 / 2.75)) {
					return aF * (7.5625 * aD * aD) + aC
				} else {
					if (aD < (2 / 2.75)) {
						return aF * (7.5625 * (aD -= (1.5 / 2.75)) * aD + 0.75) + aC
					} else {
						if (aD < (2.5 / 2.75)) {
							return aF * (7.5625 * (aD -= (2.25 / 2.75)) * aD + 0.9375) + aC
						} else {
							return aF * (7.5625 * (aD -= (2.625 / 2.75)) * aD + 0.984375) + aC
						}
					}
				}
			},
			easeInOut: function(aD, aC, aF, aE) {
				if (aD < aE / 2) {
					return t.Bounce.easeIn(aD * 2, 0, aF, aE) * 0.5 + aC
				}
				return t.Bounce.easeOut(aD * 2 - aE, 0, aF, aE) * 0.5 + aF * 0.5 + aC
			}
		}
	};
	var ap;
	var D = (function() {
		function aG(aH, aJ, aI) {
			var aK = this;
			E(aK, r, []);
			aK.type = "LTweenLiteChild";
			aK.toNew = [];
			aK.init(aH, aJ, aI)
		}
		var aF = {
			init: function(aI, aN, aM) {
				var aR = this,
					aK = null,
					aP = null;
				if (typeof aM.tweenTimeline == W) {
					aM.tweenTimeline = aD.TYPE_FRAME
				}
				aR.target = aI;
				aR.duration = aN || 0.001;
				aR.vars = aM;
				aR.delay = aR.vars.delay || 0;
				if (aR.vars.tweenTimeline == aD.TYPE_TIMER) {
					aR.currentTime = (new Date()).getTime() / 1000;
					aR.initTime = aR.currentTime;
					aR.startTime = aR.initTime + aR.delay
				} else {
					aR.currentTime = 0;
					aR.duration *= 1000;
					aR.currentTime -= aR.delay * 1000;
					aR.initTime = (new Date()).getTime() - aR.currentTime
				}
				aR.combinedTimeScale = aR.vars.timeScale || 1;
				aR.active = aR.duration == 0 && aR.delay == 0;
				aR.varsto = {};
				aR.varsfrom = {};
				aR.varsDiff = {};
				aR.varsListIndex = {};
				aR.varsListCurr = {};
				aR.varsListTo = {};
				aR.varsListLength = {};
				aR.stop = false;
				if (typeof aR.vars.ease === "string") {
					aP = aR.vars.ease.split(".");
					if (Array.isArray(aP)) {
						aR.vars.ease = t[aP[0]][aP[1]]
					}
				}
				if (typeof aR.vars.ease !== "function") {
					aR.vars.ease = t.None.easeIn
				}
				aR.ease = aR.vars.ease;
				delete aR.vars.ease;
				if (aR.vars.onComplete) {
					aR.onComplete = aR.vars.onComplete;
					delete aR.vars.onComplete
				} else {
					aR.onComplete = null
				}
				if (aR.vars.onUpdate) {
					aR.onUpdate = aR.vars.onUpdate;
					delete aR.vars.onUpdate
				} else {
					aR.onUpdate = null
				}
				if (aR.vars.onStart) {
					aR.onStart = aR.vars.onStart;
					delete aR.vars.onStart
				} else {
					aR.onStart = null
				}
				for (aK in aR.vars) {
					if (aK == "coordinate" && Array.isArray(aR.vars[aK])) {
						var aO = 0,
							aQ = {
								x: aR.target.x,
								y: aR.target.y
							};
						for (var aL = 0, aJ = aR.vars[aK].length; aL < aJ; aL++) {
							var aH = aR.vars[aK][aL];
							aO += av.distance(aH, aQ);
							aQ = aH
						}
						aR.varsListIndex[aK] = 0;
						aR.varsListCurr[aK] = 0;
						aR.varsListTo[aK] = aO;
						aR.varsto[aK] = aR.vars[aK];
						aR.varsfrom[aK] = {
							x: aR.target.x,
							y: aR.target.y
						};
						continue
					} else {
						if (typeof aR.vars[aK] != "number") {
							continue
						}
					}
					aR.varsto[aK] = aR.vars[aK];
					aR.varsfrom[aK] = aR.target[aK];
					aR.varsDiff[aK] = aR.vars[aK] - aR.target[aK]
				}
			},
			pause: function() {
				this.stop = true
			},
			resume: function() {
				this.stop = false
			},
			tween: function() {
				var aR = this,
					aN;
				var aP = (aR.vars.tweenTimeline == aD.TYPE_TIMER);
				if (aP) {
					var aI = (new Date()).getTime() / 1000,
						aJ = aI - aR.startTime;
					if (aJ < 0) {
						return
					}
				} else {
					if (aR.stop) {
						return
					}
					if (ac.speed) {
						aR.currentTime += ac.speed
					} else {
						aR.currentTime = ((new Date()).getTime() - aR.initTime)
					}
					if (this._end) {
						aR.currentTime = aR.duration
					}
					if (aR.currentTime < 0) {
						return
					}
				}
				for (aC in aR.varsto) {
					if (typeof aR.varsListTo[aC] != W) {
						var aQ = aR.ease(aP ? aJ : aR.currentTime, 0, aR.varsListTo[aC], aR.duration);
						if (aQ > aR.varsListTo[aC]) {
							aQ = aR.varsListTo[aC]
						}
						var aM = aR.varsListIndex[aC] > 0 ? aR.vars[aC][aR.varsListIndex[aC] - 1] : aR.varsfrom[aC];
						var aO = aR.vars[aC][aR.varsListIndex[aC]];
						var aL = av.distance(aM, aO);
						while (aR.varsListCurr[aC] + aL < aQ) {
							aR.varsListCurr[aC] += aL;
							aM = aO;
							aR.varsListIndex[aC]++;
							aO = aR.vars[aC][aR.varsListIndex[aC]];
							aL = av.distance(aM, aO)
						}
						aR.target.x = aM.x;
						aR.target.y = aM.y;
						if (aL != 0 && aO.x - aM.x != 0) {
							aR.target.x += (aO.x - aM.x) * (aQ - aR.varsListCurr[aC]) / aL
						}
						if (aL != 0 && aO.y - aM.y != 0) {
							aR.target.y += (aO.y - aM.y) * (aQ - aR.varsListCurr[aC]) / aL
						}
						continue
					}
					aR.target[aC] = aR.ease(aP ? aJ : aR.currentTime, aR.varsfrom[aC], aR.varsDiff[aC], aR.duration)
				}
				if (aR.onStart) {
					aR._dispatchEvent(aR.onStart);
					delete aR.onStart
				}
				var aK;
				if (aP) {
					aK = (aJ >= aR.duration)
				} else {
					aK = (aR.currentTime >= aR.duration)
				}
				if (aK) {
					for (aN in aR.varsto) {
						if (typeof aR.varsListTo[aN] != W) {
							var aH = aR.varsto[aN][aR.vars[aN].length - 1];
							aR.target.x = aH.x;
							aR.target.y = aH.y;
							continue
						}
						aR.target[aN] = aR.varsto[aN]
					}
					if (aR.onComplete) {
						aR._dispatchEvent(aR.onComplete)
					}
					return true
				} else {
					if (aR.onUpdate) {
						aR._dispatchEvent(aR.onUpdate)
					}
				}
				return false
			},
			_dispatchEvent: function(aI) {
				var aH = this;
				aH.target.target = aH.target;
				aH.target.currentTarget = aH;
				aI(aH.target);
				delete aH.target.currentTarget;
				delete aH.target.target
			},
			to: function(aH, aJ, aI) {
				var aK = this;
				aK.toNew.push({
					target: aH,
					duration: aJ,
					vars: aI
				});
				return aK
			},
			end: function(aH) {
				this._end = true;
				this._endCallback = aH
			},
			keep: function() {
				var aJ = this,
					aI, aK, aH;
				if (aJ.toNew.length > 0) {
					aI = aJ.toNew.shift();
					if (aI.vars.loop) {
						aJ.loop = true
					}
					if (aJ.loop) {
						aK = {};
						for (aH in aI.vars) {
							aK[aH] = aI.vars[aH]
						}
						aJ.to(aI.target, aI.duration, aK)
					}
					aJ.init(aI.target, aI.duration, aI.vars);
					return true
				}
				return false
			}
		};
		for (var aC in aF) {
			aG.prototype[aC] = aF[aC]
		}
		function aD() {
			var aH = this;
			E(aH, r, []);
			aH.type = "LTweenLite";
			aH.tweens = []
		}
		aD.TYPE_FRAME = "type_frame";
		aD.TYPE_TIMER = "type_timer";
		aF = {
			count: function() {
				return this.tweens.length
			},
			ll_show: function() {
				var aJ = this;
				var aI, aK = aJ.tweens.length,
					aH;
				for (aI = 0; aI < aK; aI++) {
					aH = aJ.tweens[aI];
					if (aH && aH.tween && aH.tween()) {
						aJ.tweens.splice(aI, 1);
						aI--;
						aK = aJ.tweens.length;
						if (aH._end && aH._endCallback) {
							aH._dispatchEvent(aH._endCallback);
							aH = null
						} else {
							if (aH.keep()) {
								aJ.add(aH)
							}
						}
					}
				}
			},
			to: function(aH, aK, aJ) {
				if (!aH) {
					return
				}
				var aL = this;
				var aI = new aG({}, 0, {});
				aL.tweens.push(aI);
				aI.to(aH, aK, aJ);
				return aI
			},
			add: function(aH) {
				this.tweens.push(aH)
			},
			remove: function(aJ) {
				var aK = this;
				if (typeof aJ == W) {
					return
				}
				for (var aI = 0, aH = aK.tweens.length; aI < aH; aI++) {
					if (aJ.objectIndex == aK.tweens[aI].objectIndex) {
						aK.tweens.splice(aI, 1);
						break
					}
				}
			},
			endAll: function(aJ) {
				var aI = this;
				for (var aH = 0; aH < aI.tweens.length; aH++) {
					aI.tweens[aH].end()
				}
			},
			removeAll: function() {
				this.tweens.splice(0, this.tweens.length)
			},
			pauseAll: function() {
				for (var aI = 0, aH = this.tweens.length; aI < aH; aI++) {
					this.tweens[aI].pause()
				}
			},
			resumeAll: function() {
				for (var aI = 0, aH = this.tweens.length; aI < aH; aI++) {
					this.tweens[aI].resume()
				}
			}
		};
		for (var aC in aF) {
			aD.prototype[aC] = aF[aC]
		}
		ap = new aD();
		ac.childList.push(ap);
		var aE = new aD();
		aE.TYPE_FRAME = aD.TYPE_FRAME;
		aE.TYPE_TIMER = aD.TYPE_TIMER;
		ac.childList.push(aE);
		return aE
	})();
	var ab = (function() {
		function aC() {
			this.responseType = null
		}
		aC.prototype = {
			TEXT: "text",
			JSON: "json",
			ARRAY_BUFFER: "arraybuffer",
			BLOB: "blob",
			get: function(aE, aG, aF, aD) {
				this.getRequest("GET", aE, aG, aF, aD)
			},
			post: function(aE, aG, aF, aD) {
				this.getRequest("POST", aE, aG, aF, aD)
			},
			getRequest: function(aM, aD, aJ, aE, aF) {
				var aN = this,
					aG, aH = "",
					aL = "";
				aN.err = aF;
				var aK = aN.getHttp();
				if (!aK) {
					return
				}
				if (aJ) {
					for (aG in aJ) {
						aH += (aL + aG + "=" + aJ[aG]);
						aL = "&"
					}
				}
				if (aM.toLowerCase() == "get" && aH.length > 0) {
					aD += ((aD.indexOf("?") >= 0 ? "&" : "?") + aH);
					aH = null
				}
				aK.open(aM, aD, true);
				if (aN.responseType) {
					if (aN.responseType == aN.JSON) {
						try {
							aK.responseType = aN.responseType
						} catch (aI) {
							aK.responseType = aN.TEXT;
							aK._responseType = "json"
						}
					} else {
						aK.responseType = aN.responseType
					}
					aN.responseType = aN.TEXT
				}
				aK.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
				aK.onreadystatechange = function() {
					if (aK.readyState == 4) {
						if (aK.status >= 200 && aK.status < 300 || aK.status === 304) {
							if (aE) {
								if (aK._responseType == aN.JSON) {
									aK._responseType = aN.TEXT;
									aE(JSON.parse(aK.responseText))
								} else {
									if (aK.responseType == aN.ARRAY_BUFFER || aK.responseType == aN.BLOB || aK.responseType == aN.JSON) {
										aE(aK.response)
									} else {
										if (aK.responseText.length > 0) {
											aE(aK.responseText)
										} else {
											aE(null)
										}
									}
								}
							}
						} else {
							if (aF) {
								aF(aK)
							}
						}
					}
				};
				aK.send(aH)
			},
			getHttp: function() {
				if (typeof XMLHttpRequest != W) {
					return new XMLHttpRequest()
				}
				try {
					return new ActiveXObject("Msxml2.XMLHTTP")
				} catch (aD) {
					try {
						return new ActiveXObject("Microsoft.XMLHTTP")
					} catch (aD) {
						if (!this.err) {
							this.err(aD)
						}
					}
				}
				return false
			}
		};
		return new aC()
	})();
	var I = (function() {
		function aD() {
			var aF = this;
			E(aF, f, []);
			aF.display = document.createElement("div");
			aF.iframe = document.createElement("iframe");
			aF.display.style.position = "absolute";
			aF.display.style.marginTop = "0px";
			aF.display.style.marginLeft = "0px";
			aF.display.style.zIndex = 11;
			if (ac.ios) {
				aF.display.style.overflow = "auto";
				aF.display.style.webkitOverflowScrolling = "touch"
			}
			aF.display.appendChild(aF.iframe);
			aF.idAdded = false
		}
		var aE = {
			loadURL: function(aF) {
				var aG = this;
				aG.iframe.src = aF;
				aG.iframe.onload = function() {
					aG.dispatchEvent(y.COMPLETE)
				}
			},
			show: function() {
				var aF = this;
				if (!aF.idAdded) {
					ac.object.appendChild(aF.display);
					aF.idAdded = true
				}
				if (aF.display.style.display == "none") {
					aF.display.style.display = ""
				}
			},
			die: function() {
				ac.object.removeChild(this.display);
				this.idAdded = false
			},
			hide: function() {
				this.display.style.display = "none"
			},
			setViewPort: function(aG) {
				var aF = this,
					aI = parseInt(ac.canvasObj.style.width) / ac.canvasObj.width,
					aH = parseInt(ac.canvasObj.style.height) / ac.canvasObj.height;
				aF.display.style.marginTop = (parseInt(ac.canvasObj.style.marginTop) + ((aG.y * aH) >>> 0)) + "px";
				aF.display.style.marginLeft = (parseInt(ac.canvasObj.style.marginLeft) + ((aG.x * aI) >>> 0)) + "px";
				aF.iframe.style.width = aF.display.style.width = (aG.width * aI >>> 0) + "px";
				aF.iframe.style.height = aF.display.style.height = (aG.height * aH >>> 0) + "px"
			}
		};
		for (var aC in aE) {
			aD.prototype[aC] = aE[aC]
		}
		return aD
	})();
	var Q = (function() {
		function aD(aG) {
			var aF = this;
			E(aF, r, []);
			aF.q1 = null;
			aF.q2 = null;
			aF.q3 = null;
			aF.q4 = null;
			aF.parent = null;
			aF.data = [];
			aF.rect = aG;
			aF.root = aF
		}
		var aE = {
			createChildren: function(aG) {
				if (aG == 0) {
					return
				}
				var aI = this;
				var aF = aI.rect.width / 2,
					aH = aI.rect.height / 2;
				aI.q1 = new aD(new N(aI.rect.x + aF, aI.rect.y, aF, aH));
				aI.q2 = new aD(new N(aI.rect.x + aF, aI.rect.y + aH, aF, aH));
				aI.q3 = new aD(new N(aI.rect.x, aI.rect.y + aH, aF, aH));
				aI.q4 = new aD(new N(aI.rect.x, aI.rect.y, aF, aH));
				aI.q1.parent = aI.q2.parent = aI.q3.parent = aI.q4.parent = aI;
				aI.q1.root = aI.q2.root = aI.q3.root = aI.q4.root = aI.root;
				aI.q1.createChildren(aG - 1);
				aI.q2.createChildren(aG - 1);
				aI.q3.createChildren(aG - 1);
				aI.q4.createChildren(aG - 1)
			},
			hasChildren: function() {
				var aF = this;
				return aF.q1 && aF.q2 && aF.q3 && aF.q4
			},
			clear: function() {
				var aF = this;
				if (aF.hasChildren()) {
					return aF.q1.clear() || aF.q2.clear() || aF.q3.clear() || aF.q4.clear()
				} else {
					aF.q1 = null;
					aF.q2 = null;
					aF.q3 = null;
					aF.q4 = null;
					aF.parent = null;
					aF.data = [];
					return aF
				}
			},
			add: function(aG, aF, aI) {
				var aH = this;
				if (!aH.isIn(aF, aI)) {
					return null
				}
				if (aH.hasChildren()) {
					return aH.q1.add(aG, aF, aI) || aH.q2.add(aG, aF, aI) || aH.q3.add(aG, aF, aI) || aH.q4.add(aG, aF, aI)
				} else {
					aH.data.push(aG);
					return aH
				}
			},
			remove: function(aG, aF, aJ) {
				var aI = this;
				if (!aI.isIn(aF, aJ)) {
					return null
				}
				if (aI.hasChildren()) {
					return aI.q1.remove(aG, aF, aJ) || aI.q2.remove(aG, aF, aJ) || aI.q3.remove(aG, aF, aJ) || aI.q4.remove(aG, aF, aJ)
				} else {
					var aH = aI.data.indexOf(aG);
					if (aH != -1) {
						aI.data.splice(aH, 1);
						return aI
					} else {
						return null
					}
				}
			},
			isIn: function(aF, aH) {
				var aG = this;
				return (typeof aF == W || (aF >= aG.rect.x && aF < aG.rect.right)) && (typeof aH == W || (aH >= aG.rect.y && aH < aG.rect.bottom))
			},
			getDataInRect: function(aH) {
				var aF = this;
				if (!aF.rect.intersects(aH)) {
					return []
				}
				var aG = aF.data.concat();
				if (aF.hasChildren()) {
					aG.push.apply(aG, aF.q1.getDataInRect(aH));
					aG.push.apply(aG, aF.q2.getDataInRect(aH));
					aG.push.apply(aG, aF.q3.getDataInRect(aH));
					aG.push.apply(aG, aF.q4.getDataInRect(aH))
				}
				return aG
			}
		};
		for (var aC in aE) {
			aD.prototype[aC] = aE[aC]
		}
		return aD
	})();
	A.addChild = ak;
	A.removeChild = am;
	A.base = B;
	A.accelerometerEvent = e;
	A.ajax = ab;
	A.animation = k;
	A.bitmap = q;
	A.bitmapData = s;
	A.bitmapFilter = ah;
	A.colorMatrixFilter = ai;
	A.colorTransform = T;
	A.convolutionFilter = b;
	A.displayObject = P;
	A.displayObjectContainer = ae;
	A.dropShadowFilter = ag;
	A.easing = t;
	A.event = y;
	A.eventDispatcher = f;
	A.focusEvent = ao;
	A.global = ac;
	A.graphics = l;
	A.init = L;
	A.interactiveObject = h;
	A.keyboardEvent = C;
	A.matrix = az;
	A.media = x;
	A.mouseEvent = g;
	A.mouseEventContainer = al;
	A.multitouch = H;
	A.multitouchInputMode = ar;
	A.object = r;
	A.point = av;
	A.rectangle = N;
	A.shape = n;
	A.sound = a;
	A.sprite = V;
	A.stage = aw;
	A.stageAlign = ax;
	A.stageScaleMode = aj;
	A.stageWebView = I;
	A.system = aB;
	A.textEvent = aq;
	A.timerEvent = Z;
	A.transform = c;
	A.tweenLite = D;
	A.tweenLiteTimeline = ap;
	A.vec2 = F;
	A.webAudio = S;
	A.guide = (function() {
		function aC(aD, aJ, aE, aI, aF) {
			if (typeof aD === "object") {
				aF = aD.color;
				aI = aD.h;
				aE = aD.w;
				aJ = aD.y;
				aD = aD.x
			}
			aF = aF || "#fff";
			var aH = this;
			A.base(aH, A.shape, []);
			aH.x = aD;
			aH.y = aJ;
			aH.w = aE;
			aH.h = aI;
			aH.r = Math.min(aE, aI) / 2;
			aH.tweens = [];
			aH.timers = [];
			aH.arcList = [];
			for (var aG = 0; aG < 3; aG++) {
				(function() {
					var aK = {
						r: 0,
						p: 1
					};
					aH.graphics.add(function() {
						var aL = A.global.canvas;
						aL.save();
						aL.beginPath();
						aL.arc(aH.w / 2, aH.h / 2, aK.r, 0, 2 * Math.PI);
						aL.closePath();
						aL.fillStyle = aF;
						aL.globalAlpha = aK.p;
						aL.fill();
						aL.restore()
					});
					aH.arcList.push(aK)
				})()
			}
		}
		aC.prototype.play = function() {
			var aD = this;
			aD.stop();
			aD.arcList.forEach(function(aE, aF) {
				aD.timers.push(setTimeout(function() {
					aD.tweens.push(A.tweenLite.to(aE, 1, {
						r: aD.r,
						p: 0,
						loop: true,
						onComplete: function(aG) {
							aE.r = 0;
							aE.p = 1
						}
					}))
				}, (2 - aF) * 200))
			});
			return aD
		};
		aC.prototype.change = function(aE) {
			var aD = this;
			aE.x && (aD.x = aE.x);
			aE.y && (aD.y = aE.y);
			return aD
		};
		aC.prototype.stop = function() {
			var aD = this;
			aD.arcList.forEach(function(aE, aF) {
				clearTimeout(aD.timers[aF]);
				aE.r = 0;
				aE.p = 1
			});
			aD.tweens.forEach(function(aF, aE) {
				A.tweenLite.remove(aF)
			});
			aD.tweens = [];
			aD.timers = [];
			return aD
		};
		return aC
	})();
	A.Score = function(aG, aC, aF) {
		var aE = $.extend({
			textAlign: "center",
			baseBaseLine: "middle",
		}, aG);
		var aD = {};
		return function(aM, aI, aN, aK, aH) {
			var aL = aD[aM];
			if (!aL) {
				aL = new A.bitmapData(null, 0, 0, aC * A.global.ratio, aF * A.global.ratio, s.DATA_CANVAS);
				$.extend(aL._context, aE);
				aL._context.fillText(aM, aC / 2, aF);
				aD[aM] = aL
			}
			var aJ = this;
			A.base(aJ, A.bitmap, [aL, aI, aN, aK || aC, aH || aF])
		}
	};
	A.test = (function() {
		var aD = false;
		var aC = 300;
		var aE = {
			init: function(aF) {
				aD = [];
				this.lastTime = new Date().getTime()
			},
			run: function(aG) {
				if (!m_debug || !aD) {
					return
				}
				if (aD.length > (aG || aC)) {
					alert(aD);
					aD = false;
					return
				}
				var aF = new Date().getTime();
				aD.push(aF - this.lastTime);
				this.lastTime = aF
			}
		};
		aE.init();
		return aE
	})();
	A.setTopBarNotLF = function(aC, aD) {
		var aE = A.global;
		aE.canvasObj = aC;
		aE.width = aE.canvasObj.width;
		aE.height = aE.canvasObj.height;
		aE.canvasStyleWidth = aE.width;
		aE.canvasStyleHeight = aE.height;
		aE.canvas = aE.canvasObj.getContext("2d");
		j(aD)
	};
	A.showTopBar = function() {
		A.gameTopBar && A.global.show([A.gameTopBar])
	};

	function j(aF) {
		if (A.notCanvasTopBar) {
			return
		}
		aF = aF || 1;
		var aH = new A.sprite();
		var aE = $("#gameTopBar").hide();
		if (aE.length == 0) {
			return
		}
		var aD = $(".userImgBox");
		var aG = aH.graphics;
		var aC = g_rem * aF;

		function aI(aJ) {
			return aJ.replace(/([.\d]+)(px|em|rem|pt)/g, function(aL, aK, aM) {
				return (aK * aF) + aM
			})
		}
		aG.drawRect(0, "", [0, 0, aE.outerWidth() * aF, aE.outerHeight() * aF], true, aE.css("background-color"));
		if ($("#grade").length > 0) {
			aG.e_grade = [0, 3.9 * aC, 1.7 * aC,
			{
				font: aI($("#grade").css("font")),
				textAlign: "left",
				textBaseline: "middle",
				fillStyle: aE.css("color")
			}]
		}
		if ($(".timeBox").length > 0 && hg.time.initTime !== 99999) {
			aG.e_timeText = ["时间", 8 * aC, 1 * aC,
			{
				font: aI($(".timeBox").css("font")),
				textAlign: "center",
				textBaseline: "middle",
				fillStyle: aE.css("color")
			}];
			aG.e_time = ["10.00", 8 * aC, 2.25 * aC,
			{
				font: aI($(".time").css("font"))
			}]
		}
		if (aD.length > 0) {
			aG.userImg = [0.2 * aC, aD.css("border-color"), [2.1 * aC, 1.75 * aC, 1.25 * aC, 0, Math.PI * 2], new A.bitmap(new A.bitmapData(aD.find(".userImg")[0]), 0.85 * aC, 0.5 * aC, 2.5 * aC, 2.5 * aC)]
		}
		aG.add(an);
		hg.time && hg.time.initTime !== 99999 && (hg.time.on("setTime", function(aJ) {
			aG.e_time[0] = aJ
		}).targetFlag = false);
		hg.grade && (hg.grade.on("setGrade", function(aJ) {
			aG.e_grade[0] = aJ
		}).target = null);
		hg.time.init();
		aE.remove();
		A.gameTopBar = aH
	}
	function an() {
		var aE = A.global.canvas;
		if (this.userImg) {
			var aD = this.userImg[3];
			var aC = this.userImg[2];
			aE.beginPath();
			aE.moveTo(aC[0] + aC[2], aC[1]);
			aE.arc.apply(aE, aC);
			aE.lineWidth = this.userImg[0];
			aE.strokeStyle = this.userImg[1];
			aE.stroke();
			if (aD.bitmapData.width > 0 && aD.bitmapData.height > 0) {
				aE.save();
				aE.clip();
				aE.drawImage(aD.bitmapData.image, 0, 0, aD.bitmapData.width, aD.bitmapData.height, aD.x, aD.y, aD.width, aD.height);
				aE.restore()
			}
		}
		aA(aE, this.e_grade);
		aA(aE, this.e_timeText);
		aA(aE, this.e_time)
	}
	function aA(aD, aC) {
		if (!aC) {
			return
		}
		$.extend(aD, aC[3]);
		aD.fillText(aC[0], aC[1], aC[2])
	}
	function X(aK, aH, aI, aE, aG, aJ, aC) {
		at();
		ac.speed = ac.delta = aK;
		if (aK === 0) {
			aK = ac.requestAnimFrame
		} else {
			if (aC) {
				aK = (function(aL) {
					return function(aM) {
						au.setTimeout(aM, aL)
					}
				})(aK)
			}
		}
		var aF = function() {
				j();
				hg.time && (hg.time.updateFlag = false);
				setTimeout(aG, 100);
				ac.startTimer = (new Date()).getTime()
			};
		var aD;
		if (typeof aK == "function") {
			aD = function() {
				ac.speed = null;
				ac.currentTime = (new Date).getTime();
				aK(function() {
					var aL = (new Date).getTime();
					ac.delta = aL - ac.currentTime;
					ac.currentTime = aL;
					ac.delta > 500 && (ac.delta = 0);
					ac.onShow();
					aK(arguments.callee)
				});
				ac.setCanvas(aH, aI, aE);
				aF()
			}
		} else {
			aD = function() {
				ac.frameRate = setInterval(function() {
					ac.onShow()
				}, aK);
				ac.setCanvas(aH, aI, aE);
				aF()
			}
		}
		if (aJ != null && aJ == y.INIT) {
			aD()
		} else {
			y.addEventListener(au, "load", function() {
				aD()
			})
		}
	}
	function at(aC) {
		var aD = aC || CanvasRenderingContext2D.prototype;
		if (aD.__LF__init__change) {
			return aD.__LF__init__change
		}
		var aG = (function(aH) {
			var aJ = 1;
			try {
				aJ = aH.backingStorePixelRatio || aH.webkitBackingStorePixelRatio || aH.mozBackingStorePixelRatio || aH.msBackingStorePixelRatio || aH.oBackingStorePixelRatio || 1
			} catch (aI) {}
			return (au.devicePixelRatio || 1) / aJ
		})(aD),
			aF = function(aJ, aH) {
				for (var aI in aJ) {
					if (aJ.hasOwnProperty(aI)) {
						aH(aJ[aI], aI)
					}
				}
			},
			aE = {
				fillRect: "all",
				clearRect: "all",
				strokeRect: "all",
				moveTo: "all",
				lineTo: "all",
				arc: [0, 1, 2],
				arcTo: "all",
				bezierCurveTo: "all",
				isPointinPath: "all",
				isPointinStroke: "all",
				quadraticCurveTo: "all",
				rect: "all",
				translate: "all",
				createRadialGradient: "all",
				createLinearGradient: "all",
				transform: [4, 5],
				setTransform: [4, 5],
			};
		aD.__LF__init__change = aG;
		if (aG === 1) {
			return aG
		}
		aF(aE, function(aI, aH) {
			aD[aH] = (function(aJ) {
				return function() {
					var aM, aK, aL = Array.prototype.slice.call(arguments);
					if (aI === "all") {
						aL = aL.map(function(aN) {
							return aN * aG
						})
					} else {
						if (Array.isArray(aI)) {
							for (aM = 0, aK = aI.length; aM < aK; aM++) {
								aL[aI[aM]] *= aG
							}
						}
					}
					return aJ.apply(this, aL)
				}
			})(aD[aH])
		});
		aD.stroke = (function(aH) {
			return function() {
				this.lineWidth *= aG;
				aH.apply(this, arguments);
				this.lineWidth /= aG
			}
		})(aD.stroke);
		aD.fillText = (function(aH) {
			return function() {
				var aI = Array.prototype.slice.call(arguments);
				aI[1] *= aG;
				aI[2] *= aG;
				if (aI[3]) {
					aI[3] *= aG
				}
				this.font = this.font.replace(/([.\d]+)(px|em|rem|pt)/g, function(aK, aJ, aL) {
					return (aJ * aG) + aL
				});
				aH.apply(this, aI);
				this.font = this.font.replace(/([.\d]+)(px|em|rem|pt)/g, function(aK, aJ, aL) {
					return (aJ / aG) + aL
				})
			}
		})(aD.fillText);
		aD.strokeText = (function(aH) {
			return function() {
				var aI = Array.prototype.slice.call(arguments);
				aI[1] *= aG;
				aI[2] *= aG;
				this.font = this.font.replace(/([.\d]+)(px|em|rem|pt)/g, function(aK, aJ, aL) {
					return (aJ * aG) + aL
				});
				aH.apply(this, aI);
				this.font = this.font.replace(/([.\d]+)(px|em|rem|pt)/g, function(aK, aJ, aL) {
					return (aJ / aG) + aL
				})
			}
		})(aD.strokeText);
		aD.drawImage = (function(aH) {
			return function() {
				var aI = Array.prototype.slice.call(arguments);
				if (aI.length === 3) {
					aI[1] *= aG;
					aI[2] *= aG
				} else {
					if (aI.length === 5) {
						aI[1] *= aG;
						aI[2] *= aG;
						aI[3] *= aG;
						aI[4] *= aG
					} else {
						if (aI.length === 9) {
							aI[5] *= aG;
							aI[6] *= aG;
							aI[7] *= aG;
							aI[8] *= aG
						}
					}
				}
				aH.apply(this, aI)
			}
		})(aD.drawImage);
		aD.putImageData = (function(aH) {
			return function() {
				var aI = Array.prototype.slice.call(arguments);
				for (i = 1, len = aI.length; i < len; i++) {
					aI[i] *= aG
				}
				aH.apply(this, aI)
			}
		})(aD.putImageData);
		return aG
	}
	A.setCanvasePixelRatio = at
})(LF, window);